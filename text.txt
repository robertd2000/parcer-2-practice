Как исправить проблему с установкой viber в kubuntu 18.04
В новой версии kubuntu 18.04 используется libcurl4, а в зависимостях viber 3-я версия. Соответственно при установке viber просит установить старую версию и сносит новую libcurl4 и софт зависящий от неё. Лучший известный мне способ исправить данную проблему — пересобрать пакет.
И всё работает. Печалит то, что современные приоритеты месенджеров кроются в продажах стикеров и информации, а вот потратить пару человекочасов на нормальный способ дистрибуции — жалко.
Рефакторинг блога.
Бложек немного приболел, дроплет на DO полетел, унеся с собой блог. Занимаюсь сейчас ремонтом и восстановлением из бэкапа. А заодно надо почистить лютый треш из стрых записей. А то многие статьи самому страшно перечитывать и хочется поломать руки тому говнокодеру…
Недостатки laravel
Я очень люблю фреймворк laravel, пользуюсь им начиная с 3-й версии, тогда он был как глоток свежего воздуха на фоне zend и symfony. Уважаю Тейлора за проделанную работу, за принесённую в php фреймворки идею удобного апи и умение копировать лучшее из других фреймворков вроде RoR. О плюсах сказано уже много, но у него есть свои недостатки.
Эти недостатки не фатальны, а некоторые и вовсе мои личные привычки, которые другим покажутся надуманными. Всё дерьмо вылитое ниже не сильно влияет на мою оценку laravel, который считаю лучшим фреймворком в мире PHP. И спасибо @kotchuprik и его статье, который подтолкнул высказаться и дал некоторые идеи.
Фасады и статика, они везде, даже в начале  проекта у вас уже в routes.php есть Route::get и это при наличии хорошего DI, который позволяет отказаться от этого и получить нормальный автокомплит в IDE. А так приходится ставить IDE Helper. Почему-то комментаторы набросились на этот пункт, начали меня оскорблять и учить, но недобитый фасад из коробки есть, я не виноват.
Непоследовательность. Фреймворк очень долго переходил на PSR, но так до конца не перешёл. В папке database творится полный бардак. В app прямо в корне лежит моделька User. Роуты валяются в файлике app/Http/routes.php. Шаблоны расположены в директории resources, в отрыве от остального app. Предпочитаю когда есть директория с модулем, а уже в ней контроллеры, модели, шаблоны и т.д. А так получается каша, где все контроллеры свалены в кучу, с которой сложно работать на большом проекте. Сразу начинаешь оформлять код как пакеты, но появляется неудобство с прописыванием дополнительных путей для консольных команд.
Консольные команды и контроллеры почему-то разные сущности, при этом контроллеры вовсе отправлены в папку Http с роутингом и мидлеварами. Всегда считал что консоль должна работать так же как и при запросе из браузера и делал синтаксис.
Отсутствие базовых классов для Model, как это есть для контроллеров, запроса, событий. А вот модельки при генерации наследуются от модели из вендора, что создаёт трудности с расширением, приходится править цепочку наследования после кодогенерации.
Версионирование. Между версиями большие изменения, при этом в минорных релизах умудраются убивать обратную совместимость, например, убрав метод list из моделей между 5.2 и 5.3, а не подождав до 6-й и там отрубив deprecated. Хотя сейчас есть LTS версия, но на ней мы уже ловили баг с роутингом, правда виной тому был вендорский пакет от symfony.
Есть древний принцип версионирования http://semver.org/lang/ru/, согласно ему минорная версия лишь добавляет функционал не ломая обратной совместимости.
Миграции. Они до сих пор не по psr и без немспейсов, название класса не совпадает с именем файла из-за чего возникают коллизии. Например, у вас был раздел новости и таблица под него с миграцией
Создаст файл 2014_01_01_000000_create_users_table.php с классом CreateNewsTable, затем этот раздел убрали, а церез год вернули, но он уже работает по другим правилам и содержит другие поля
2015_03_06_000000_create_users_table.php с тем же классом CreateNewsTable.
Отладка. Из коробки отсутствует дебаг панель, её нужно устанавливать отдельно. Не очень хорошо подменён error_handler, из-за чего в дев режиме иногда видишь белую страницу и нужно лезть в логи, чтобы узнать что права на папку не прописал. В том же дев режиме почему-то не логируются запросы к БД, из нужно руками включать через те же фасады \DB::enableQueryLog();
Elixir — не понимаю зачем Тейлор всунул из коробки эту нодовскую приблуду. Можно было прикрутить assetic или его аналоги, а там уже пусть разработчик через конфиги решает собирать ему всякие less c помощью php или node-ruby утилит. Assetic справляется с этими задачами, а проектах с большим количеством фронтенда всё равно пользуются webpack и grunt.
Формы. Почему-то выбросили компонент для работы с формами, теперь приходится пользоваться LaravelCollective, который является сторонним компонентом, а сам фреймворк не поддерживает функционал необходимый в каждом веб приложении. Для REST формы не нужны, но как раз ради этого кейса Тейлор создал отдельный фреймворк Lumen. А так laravel проигрывает на фоне других фреймворков не имея решения для форм из коробки.
Eloquent работает со связанными таблицами не через джойны, а с помощью IN, это весьма неудобно если например нужно отсортировать данные по связанной таблице — новости по колличеству комментариев.
Так же есть магические файндеры вроде where<field>(<value>) whereUsername(‘AmdY’), это очередной способ отстрелить себе ногу.
Модель это мусорка в которое объеденились:
1. Непосредственно сама модель и её методы, мутаторы
2. Коллекции для работы с набором моделей, итерирование, сортировка, фильтрация и т.д.
3. Построитель запросов select, where, take, get, all
4. Пагинатор paginate, append
5. Скоупы
6. Менеджер подключений setConnection, onWriteConnection …
Многие методы и атрибуты статические сообветсвенно распостраняются на все объекты класса.
7. Связи hasOne, hasMany ….
8. Observer и методы creating, created,deleting и т.д. При этом эти методы так же статические и задевают все модели
9. Работа с event-ами
10. Сериализация, при этом только json, стратегии нельзя задавать
Скоупы, не понимаю зачем они нужны, они ломают автокомплит, вешаются на весь класс, а есть ещё глобальные скоупы.
Отсутствие схем и возможности нормальной рефлексии для моделей, позволяющие строить автобилдеры для форм и списков, даже список связанных моделей нельзя получить.
Blade. Непонятные вещи творятся с шаблонизатором, выбран очень странный путь его развитие с внедрением опасных конструкций  @inject и @php, следующим шагом будет @eval и @goto? При этом нет удобных средств для контроля цикла foreach, чтобы узнать первая-последняя итерация или её номер. Делать такое приходится через вставку php кода <?php $i++; ?>. Ну и отсутствие режима песочницы, из-за возможности использования php тегов а так же @php, @inject наши шаблоны опасны и нельзя делать безопасные шаблоны-темы, так как они подвержены php injection.
Установка пакетов. В laravel 3 бандлы можно было устанавливать из командной строки, сейчас же вам нужно:
1. Зайти на документацию по пакету
2. Добавить пакет через composer
3. Прописать его в providers
4. Добавить alias для фасадов. Так лучше не делать, но иногда фасады это единственный способ переопределять статик ад в пакетах.
5. Импортнуть конфиги-вьюхи, миграции, сиды и т.д.
Для 4-ки была идея специального установщика, но видимо она так и не попала в пятую.
Роутинг.  Нужно прописывать все роуты вручную, исключения составляют ресурсы. Раньше был метод controller (в 5.2 deprecated, в master уже нет), который автоматически делал роуты для целого класса, но его убрали. Кроме того невозможно задать схему /module/controller/action, приходится делать специальный роут {module}/{controller?}/{action?} который всё это перехватывает и вручную инициализиуется контроллер и дёргается метод.
Тесты. Если у вас установлен глобально phpunit, то без бубна тесты им не запустятся. Очень бесило то, что не работали обсерверы в моделях при тестировании, сейчас это починили. Ну и не нравится очередной велосипед вместо проверенного Codeception.
Документация, в ней очень много примеров плохого кода, использование фасадов, отсутствие DI, замыкания для роутов. Учиться хорошему стилю новички должны на laracast, где часть уроков платная.
Поддержка. В один прекрасный день Тейлор взял у убил все issue на github, такое отношения к багам пугает. LTS появилось очень поздно, лишь на версии 5.1. Ну и развитие идёт по пути того, что надо авторам для их проекта, а не под нужды сообщества.
Джуниоры. Свой кажущейся простотой фреймворк привлекает кучу новичков, которые не могут освоить даже документацию к фреймворку, composer, разобраться с автозагрузчиком и научиться устанавливать document root. Вот типичный пример таких джуниоров, которые даже синтаксиса языка не знают.
p.s. Подбрасывайте ещё недостатки, буду добавлять их в статью чтобы собрать в одном месте, а не ныть постоянно по мелочам.

Проблемы с обновлением ubuntu
Недавно на kubuntu 14.10 столкнулся с проблемой при обновлении
Долго не мог найти решение, но всё же нарыл в очередной заход
Спасибо автору коммента Mete.
Continuous Integration, delivery, deployment
Данный пост противопоказан и может оскорблять чувства верующих в церковь Мартина Фаулера, так как является довольно вольной трактовкой, но обтесанной годами моей практики.
Сидит программист, пишет свой код, думает о пиве и здесь появляется другой программист, с ним тестировщик и, прости Господи, проектный менеджер. Здесь уже не до пива, код больше нельзя править на сервере через удалённый доступ. Приходится разворачивать git, лепить ветки, создавать билды и гонять тесты и в дело вступает супергерой Continuous. Последнее время принято мешать три шага Continuous в одну кучу, хотя эти шаги сильно отличаются по целям и подходам. Эти шаги — Continuous Integration, Continuous Delivery и Continuous Deployment.
Continuous Integration — интеграция вашего кода c общим репозиторием. После того как вы совершаете коммит-пуш, система видит его, делает билд, запускает unit тесты и собирает разную статистику о качестве, покрытии и метрики кода. После этого в интерфейсе системы мы может просмотреть всё собранное. В качестве сервера CI можно использовать прожёрливый но удобный Jenkins (Java) или провославный, но сырой PHPCI (PHP). Очень часто грешат тем, что не контролируют эти самые метрики, доверяя только code review. Например, phpmetrics не только всё считает, но и рисует графики, где визуально можно заметить проблемы на проекте. Из-за того, что мы гоняем только unit тесты, то билд получается простой, все происходит почти мгновенно, можно делать даже на машине разработчика, а уже по итогам делать пуш на сервер. Так что программист может и должен коммитить сколько угодно раз на день.


Continuous Delivery — непрерывная доставка. Развёртывание проекта на веб сервере, чтобы его могли посмотреть тестировщики, погонять функциональные, интеграционные, нагрузочные и прочие тесты. Этот билд является довольно тяжёлым и долгим, нам нужна полноценная и заполненная фикстурами база данных, нужны дополнительные ассеты, вроде картинок товаров или видео для скачивания. Потому данный шаг не так часто делается, а только после CI, иногда только по ночам, а бывает даже запускается не в автоматическом режиме.
Continuous deployment — деплоймент на боевые сервера. Важным отличием от предыдущего шага является понимание того, что билд может не пройти или результат на реальных данных будет неверный, потому нужно быть готовым к откату. Здесь на помощь приходят утилиты вроде capistrano (Ruby) или rocketeer (PHP). Они создают разворачивают каждый релиз в отдельной директории, переключая текущий, который по сути является ссылкой на один из релизов.
Rocketeer штука очень полезная и годиться для первых двух этапов, особенно, если вы не используете фиче бранчи и валите все правки в один stage-prelive. Тогда в случае проваленных тестов он сделает revert для последних правок и rollback для релиза. Помимо этого его можно использовать как task runner, как и наоборот — с помощью task runner можно делать deploy. Так как последнее время у некоторых разработчиков проблемы с поиском php based утилит, то посоветую Robo, не вкручивайте, пожалуйста, всякие gulp или elixir.
Вроде ничего не забыл, шаги очень простые и настроив один раз вы сможете внедрять всю цепочку в новые проекты менее чем за день без специально обученных людей. В интернете можно найти сервисы, где все уже работает, но я не советую ими пользоваться, нужно хотя бы раз самому разобраться, да и дополнительная гибкость рано или поздно вам понадобится.
Модули в angularjs
Поговорим о повторно используемом коде. Чтобы код повторно использовать его нужно оформлять особым способом и выносить в пакеты. Сейчас все нормальные фреймворки в разных языках программирования имеют поддержку пакетов и пакетные менеджеры для управления ими, а так же для решения проблем с версиями и зависимостями. В javascript для управления пакетами применяется bower. Теперь же рассмотрим как писать код, чтобы его можно было внедрять в проекты, в качестве препарируемого будет angularjs.
Angularjs поддерживает модули, будем использовать именно их. Для примера можно разворатить пару готовых, я же постараюсь описать найденное мною. Модуль является контейнер в который мы можем складывать константы, переменные, контроллеры, сервисы и т.д., далее мы просто подключаем js файл и при создании модуля приложений добавляем свой модуль в зависимости.
Теперь в модуле appModule будет доступно все из myModule, это довольно печальный факт, т.к. не продумали даже неймспейсов для избавления от коллизий с именованием. Т.е. переменная bar будет доступна именно по своему имени bar, хотелось бы что-то вроде myModule.bar. Потому в целях борьбы с этим старайтесь создавать модули на каждый чих, чтобы разом в скоуп не забрасывать все содержимое. Например, можно создавать модули отдельно для контроллеров, сервисов, директив или дробить модуль на части по функционалу.
К сожалению это всё что имеется у меня по данной теме, теперь покажу пример такого модуля. Как самый часто используемый я взял авторизацию и проверку прав. Набросал довольно простой модуль. Суть такова: при описании роутоу мы добавляем аттрибут access и если он есть, то проверяем залогинен ли пользователь. Для отлавливания момента смены роута вешаем событие на $rootScope.$on(‘$routeChangeStart’, …). Ну и пару методов для авторизации и её сброса.
Как видно, создал модуль amdyAuth и в нем одну фабрику порождающий наш сервис UserService. Завёл переменную self, чтобы обращаться к объекту в callback-ах. Для конфигурирования создал конфиг, который затем можно переопределять при вызове метода run, где навешивается наше событие на смену роута. Так же для событий по смене состояний постоянно делаю broadcast, чтобы модуль можно было расширять без влезания в его код. Функционала минимум.
Теперь посмотрим его использование.
Подключил свой модуль, после чего в методе run повесил слушетелей на наши события и вызвал метод UserService.run({urlLogin: ‘login.json’, urlLogout: «login.json»}); переопределяя переменные конфига. Для роута /admin указал что нужно проверять права auth: true.
Результат можно посмотреть забрать с гитхаба https://github.com/AmdY/blog-angular-modules
Теперь немного о модулях. Созданый модуль нужно выносить в отдельный репозиторий, добавлять в него bower.json и регистрировать, чтобы можно было использовать в других проектах. В попытках найти готовые модули я набрёл на один выживший проект http://ngmodules.org/. В больше тысячи зарегистрированных модулей, а вот статистика лайков удручает, у самого популярного всего 402, а с сотней не наберётся и десятка. Люди предпочитают велосипедить, хотя есть довольно полезные модули. Но при этом нормальной авторизации, который легко бы интегрировался с laravel я не нашёл, постараюсь докрутить до продакшен состояния этот.
p.s. Покритикуйте код, а то в javascript я далеко не гуру и стиль по старинке, как под IE6.
 
Итоги 2014
В 2014 году в блоге не появилось ни одной новой записи, но помню про него, копится материал, появилась парочка черновиков и в 2015 обязательно разрожусь целым циклом постов. Год получился отличным, есть о чём рассказать.
Помимо написания кода, активно начал заниматься обучением: появилась стажёрская программа, организуем воркшопы внутри компании, готовим небольшой хакатон, провел тьму собеседований. Приятно наблюдать как это всё приносит результаты, да ещё быстрее чем планировалось. Огромное спасибо за это HR и просто отличному человеку Ольге Бобко, которая дала возможность и подталкивает в этом направлении.
А вот за код мне стыдно, он становится всё более пахнущим, работа в команде и бизнес требования уводят всё дальше от мечты перфекциониста. Помимо веб проектов поучавствовал в разработке приложения для телевизионной приставки и магазинного терминала, php и javascript открывают все больше граней и сфер применения, что не может не радовать. Осваиваю разработку под windows phone, С# отличный язык, но WinJS всё же привычнее.
С наступающим Новым годом! Желаю всем отличных проектов, чтобы о коде и паттернах думалось меньше, чем об отдыхе, пейте пиво, играйте в футбол, любите жизнь.

Continuous integration с Jenkins
Continuous integration или непрерывная интеграция — это практика создания  автоматизированной сборки проекта. Хотя это и звучит как-то заковыристо, но это то, что программист делает ежедневно. Мы пишем код и проверяем его на синтаксические ошибки, на соответствие стилю кодирования, прогоняем тесты, боремся с copy-past и тд. и т.п. В PHP существует масса инструментов. позволяющих это автоматизировать, в PEAR есть пакет phpqatools, который ставит сразу пачку таких утилит. Но прогонять их руками неудобно, к тому же хочется иметь какой-то графический интерфейс, чтобы просматривать отчёты, чтобы наблюдать как изменяется проект, иметь возможность смотреть на старые версии и т.д. Здесь на помощь приходит Jenkins.Jenkins не единственный инструмент, но он открыт и бесплатен и Sebastian Bergmann подготовил всё для интеграции его с PHP. Открываем Template for Jenkins Jobs for PHP Projects, там практически всё написано, я лишь перескажу и покажу чуть адаптированный вариант.
Ставим набор утилит для анализа кода
Затем ставим ant и jenkins, последний лучше брать самый свежий с официального сайта
Когда Jenkins установлен, он доступен по адресу http://localhost:8080/, рулить им можно через сервис service jenkins (start|stop….)
Теперь нужно добавить плагины, для этого можно воспользоваться либо веб интерфейсом, а удобнее через cli.
Теперь можно составлять свой шаблон отчётов, а лучше воспользоваться готовым 
Теперь, зайдя в панель Jenkins, вы увидите наш шаблон проекта, но его использовать не стоит, а нужно создать новый проект, скопировав его с php-template
В описании проекта картинки svg, их не убирайте, после удачной сборки они будут отображать статистику в виде графиков. Вам нужно указать источник данных, в моём случае это локальный git репозиторий. Важная деталь — jenkins пытается создать тег для сборки, я эту функцию отключаю. На скриншоте показана кнопка расширенных настроек, там нужно отметить чекбокс Skip internal tag.

 
Затем настраиваем наш ant, чтобы он генерировал отчёты. У меня билд скрипт находится по пути build/build.xml и вызываю дефолтный джоб build. Вы можете скачать готовый скрипт от Себастьяна, его нужно класть в корень проекта. Я предпочёл вынести все настройки в отдельную папку build, пример jenkins-sample выложил на github.

 
Можете указать этот пример в качестве источника и получите билд, желательно, с синим кружочком.

 
Так же доступна обширная статистика по качеству кода, тестам и сравнение с предыдущими сборками.

 
Резюме. Получилось довольно коротко, так и есть на самом деле, CI внедряется очень легко и быстро. Можно брать пример моего проекта и модифицировать его под свои, самое важное, это управлять include-exclude директориями для утилит. Можно даже запускать ant без jenkins — ant -f build/buils.xml build.
p.s. Буду вносить правки в проект, для более удобного конфигурирования, так что следите за проектом.
ORDER BY FIELD в Laravel
Есть замечательная SQL конструкция, позволяющая задавать свой порядок сортировки для ORDER BY. Сегодня мне понадобилось использовать ORDER BY FIELD(priority, 2,1,3), ситуация осложнялась тем, что используется ORM от Laravel и его Query Builder экранирует то. что передано через ->orderBy. Решение же оказалось очень простым, нужно использовать raw
Laravel-4
Последнее время меня пугают некоторые тенденции для библиотек в PHP, вместо простого и быстрой разработки мы получаем JAVA. Сейчас много php фреймворков и я их делю на две основные категории:
1. Монстры с большой гибкостью и возможностью менять любой компонент. Они отлично подходят для кровавого энтерпрайза. В этой категории два лидера Symfony 2 и Zend Framework 2, хотя последний у меня вызывает скепсис, слишком уж сырой он появился на свет.
2. Фреймворки для быстрой разработки, они менее архитектурно красивы, зато не требуют писать такую кучу кода. Среди них следует отметить широко известные Yii и Kohana.
Есть ещё микрофреймворки, php расширения, pear и т.д., но как правило они лучше подходят в качестве отдельных компонент или на очень уж простые проекты.
Я же решил рассказать о Laravel, буквально вчера появилась 4-я версия этого прекрасного фреймворка из категории 2. О нём пока мало известно, хотя 3-я версия была очень хороша и имела систему бандлов. Чего в полной мере не было у конкурентов.
Laravel позиционирует себя как php фреймворк для ремесленников. Для гуру есть symfony, а php для тех, кому нужно быстро наклепать средней руки веб проект. В нём используется много статических вызовов, чтобы не заморачиваться с зависимостями, но при этом за счёт использования паттерна Facade, у нас нет проблем с переопределением и тестированием. В 4-й версии используется много компонентов из symfony 2, ребята не пишут велосипедов, а лишь делают те компоненты, которые они могут сделать удобнее и быстрее. Larvel очень быстрый.
Основные плюшки.
1. RSETful routing.
Мы можем задавать тип заброса, объеденять роуты в группы, добавлять pre-after фильтры, можем роутить контроллер
И мега фича — роутинг ресурсов, что оечнь помогает при разработке под мобильные платформы или при создании REST API
В результате мы будем обрабатывать урлы вида
2. Командная строка и поддержка composer.
Во фреймворке активно используется кодогенерация, имеет масса готовых команд и легко можно добавлять свои, что активно делается сообществом.
С помощью команд можно заздавать контроллеры, управлять базой данных, менять схему, накатывать миграции, создавать тесты и масса других плюшек.
В старой версии установка сторонних расширений-бандлов делалось с помощью той же командной строки, но с появлением composer-а этот функционал переложили на него.
3. Bundle или Package.
Раньше были банды, которые расширяли функционал фреймворка и позволяли использовать готовые компоненты-контроллеры. Но ребята из Laravel опять прогнулись под стандарты и переименовали их в Package, подключили composer и сейчас уже 16 страниц на Packagist. Что удивительно, учитывая, что стабильный релиз был лишь на этой неделе. Из чего мы имеем следующий плюч.
4. Комьюнити, комьюнити….
Эти удивительные ребята мало кричат о крутости любимого фреймворка, но много пишут чтобы сделать его лучше. Стиль перенят из Ruby on Rails, много скринкастов и статей, регулярно проводятся конференции, в качестве IDE предпочитают Sublime text, да и для поддержки автокаплита нужно ставить отдельный пакет. И да, вы можете заказать себе майку, заметьте, там нет кричащей надписи с названием фреймворка, а понятно лишь для своего круга.
5. Очереди (Queues).
Удивительно, но очередям выделено особое место, потому что ребята понимают что в современном мире даже письма отсылаются с помощью очередей. Поддерживаются сервисы очередей  Beanstalkd, IronMQ, Amazon SQS. Берёте supervisor, поднимаете через artisan демона-слушателя и работаете с очередью без плясок с бубном.
6. Компоненты, которые нужны в жизни настоящего проекта, безопасность, формы, шаблонизатор с наследованием, сессии, отправка писем в одну строку, валидация, пагинация, IoC и  тестирование компонетова, контроллеров, TDD с phpunit или BDD с Behat. При этом использования всего этого добра в 1-2 строки, а не через сотню конфигов и десяток цепочек вызовов.
В 4-й версии докрутили компонент для работы с базой данных, теперь ORM умеет делать джойны. Из коробки поддерживается MySQL, Postgres, SQLite, SQL Server и из NoSql Redis и Mongo.
Плюсов ещё много, я постараюсь подвести черту.
Итого:
Laravel — быстрый, удобный фреймворк, с большим функционалом, хорошей производительностью и поддержкой современных технологий. Он замечательно подходит под нагруженные сайты, для создания REST API, мобильного бекенда и так называемые стартапы. Энтерпрайз это не для него.
Шаблон для PHP приложений
В очередной раз увидел чей-то велосипед и решил — с меня хватит. Сейчас в мире php наступила пора стандартизации и этим нужно пользоваться, хватит лепить приложения как попало. Сел, создал репозиторий  на github и заполнил его кусками из своих проектов. Все желающие могут присылать пожелания, баги, и пулл реквесты https://github.com/AmdY/php-app-skeleton.
Стандарты:
1. PSR — стандарты кодирования на PHP. Формируются группой FIG, стандарты принимаются после обсуждений в которых может участвовать каждый. В данный момент приняты 4 стандарта PSR-0 — PSR-3, они довольно спорные, но уже приняты большинством серьёзных проектов, так что нефик выделываться, просто делай это.
2. Composer — менеджер зависимостей для PHP. Сами пакеты находятся на https://packagist.org/, туда же можно добавлять и свои наработки. Приятной особенностью является наличие автозагрузчика по PSR-0, после установки composer.
3. PHPUnit — фреймворк для тестирования. Я добавил папку для тестов (./tests/), пример оного и настройки.
4. HTML5 boilerplate — шаблон для фронтэнда, содержит заготовки для HTML, CSS, JavaScript, дружественный к SEO и полезные плюшки для Apache. У меня версия 4.2, к сожалению она впилена не через composer, так что обновлять нужно ручками.
Чего нет (пока):
1. Bower — для управления зависимостями в JavaScript.
2. Phing — сборка php проектов, аналог Ant для Java.
3. Twitter bootstrap —  фронтенд фреймворк.
4. Утилиты типа less, объединения и сжатия JavaScript-CSS и т.д.
 
Паттерн Decorator
В больших проектах, особенно где ядро должно оставаться стабильным зачастую требуется изменения поведения объекта рантайм без дописывания кода в сам класс. Есть несколько вариантов, в этот раз я продемонстрирую паттерн Decorator (декоратор, wrapper, обёртка). Нам довелось активно использовать сей паттерн при разработке проета для IBM на базе Sugar CRM. В шуге заложено много гибкости, но некоторые части написаны очень очень давно и наружу торчит только Bean, который мы и декорировали чтобы добавить функционал или подменить стандартную реализацию. К сожалению, это не стало серебряной пулей и нам довелось хлебать кислые щи дырявой оловянной ложкой.Суть решения проста, создаём класс обёртку, засовываем в него наш исходный класс и дальше подменяем исходный класс на эту обёртку. Обёртка дёргает либо свои определённые атрибуты и методы, либо проксирует их на оригинальный класс. Реализация сего паттерна на PHP очень проста и прекрасна, демонстрирует сильные стороны языка. В помощь мы берём волшебные методы, __get __set __call вызывается, когда атрибута или класса не существует.
Код декоратора:
В конструкторе мы принимаем исходный объект и присваиваем его закрытом атрибуту class, затем в волшебных методах проксируем вызовы на этот объект. В случае существования метода в декораторе с названием метода исходного объекта будет дёргаться метод декоратора, в моём примере добавляется строка «decorator » и конкатенируется с результатом вызова оригинального метода. А вот метода decoratorOnlyMethod в исходном объекте не существует и он добавляет новый функционал.
Код класса инстанс которого мы будем декорировать
Пояснять не буду, там закрыты атрибут id и методы для доступа к нему, изменения и метод где используется значение этого атрибута.
Ну и собственно код теста который демонстрирует функционал и помогает понять как это работает в результате.
Не хочется комментировать каждую строчку, пишу пост в спешке, так как наболел и давно не писал в блог. Буду в дальнейшем стараться писать хотя бы раз в месяц. Если есть вопросы, задавайте, получилось как-то куцо и возможно не совсем понятно, но на это есть комментарии, да и приятно чувствовать вовлечённность.
Код примеров заливаю на гитхаб, смотрите, пуллреквестируйте, болейте за Спартак. https://github.com/AmdY/Blog/tree/master/decorator
Вкусности twig
Не могу не поделиться. На форуме phpclub.ru задавал вопрос о том, чтоб бы посмотреть по шаблонизатору Twig. И пользователь fixxxer дал замечательную подборку ссылок.
Макросы в QuickForm2
http://svn.php.net/viewvc/pear/pack…es/array-twig.tpl?revision=325495&view=markup
Вывод дерева (обезличенный продакшен код ({% url .. %} — мой кастомный тэг, вставляет вызовы UrlBuilder-а в момент компиляции)
http://pastebin.com/PdVbMM2b
Наследование: с обычным все понятно, horizontal reuse позволяет реюзать код, когда, например, встречаются 1, 2 и 3-колоночные варианты одинаковых в остальном страниц — пример с сайдбаром в доке вполне наглядный.
Человеческий эскейпинг и автоэскейпинг с понятием стратегии (в смарти — хардкод, при этом отменить экскейпинг в общем случае нельзя — есть только возможность отменить все фильтры вообще)
Человеческое консистентное апи для всего: фильтров, функций, compile-time тэгов (где можно нормально работать, а не конвертить, как в смарти, обратно уже изговнянные приведением к кускам пхп-кода параметры). Можно легко сделать свой загрузчик — например, так я читаю из моделей пользовательские шаблоны. Внутри твига все сделано на том же API, в отличие от смарти. Легко через Environment протащить что угодно, в отличие от, опять же, смарти, где я не находил ничего лучше, чем срать в internal config properties.
Еще можно посмотреть рецепты всяких полезных штучек.
Паттерн Money.
Все знают вредные паттерны Singleton, Registry, MVC и т.д. Но есть очень полезный паттерн, который помогает нам зарабатывать и считать деньги, в то же время его не встретишь в популярных фреймворках.
Задача. Нужно считать деньги, выполняя с ними обычные математические операции.
Проблема. PHP как и многие языки страдает известной проблемой двоичного представления чисел. Для приведения десятичного числа к двоичному внутреннему используется деление на 2, соответственно числа вроде 1/3 округляются до энного знака.
Паттерн Money реализует работу с деньгами: математические операции (+, -, *, /), сравнения (>, <, >=, <=, ==, <>) и учёт курса обмена.
Реализуем ООП-шный интерфейс, а для математических операций используем расширение bc. Времени и сил у меня сейчас мало, поэтому пока версия без учёта курса.
Пару пояснений. В конструкторе заменяем любимый русский разделитель в виде запятой на православный — точку.
Параметр $scale указывает точность операций иначе bc функции будут использовать дефолтный.
Все входные цифры принудительно оборачиваем в класс \Kiss\Money, основная выгода будет когда добавим так курсы.
Функции bc* на вход принимают  строчный параметр, поэтому передаём им строки, можно было бы просто $this, а там уже дёрнулся __toString, но это уже излишняя магия.
Для сравнения используем метод compare, в который передаём оператор. Я долго думал о логике что с чем сравнивать, в итоге решил, что логично чтобы было более человечно и объект говорил каков он относительно переданного параметра.
$money->compare(2, ‘>’); // говорит Да, если $money больше двух.
Для лучшего понимаю привожу юнит тест.
Всё.Надеюсь, в этот раз пропаду не на долго и добью этот паттерн. Удачи Вам с деньгами.
 
AJAX в Zend Framework
Издавно у меня выработалась привычка писать приложения так, чтобы они могли с лёгкостью работать и через AJAX и как его сейчас называют HMVC. При этом самое важное условие — изменения в коде контроллеров не должно быть вовсе или они должны быть минимальны. На самом деле будет написано об AJAH, потому что общение идёт через html, а не xml, но AJAX более привычное название, поэтому ниже буду использовать его.
Для начала нам нужен двухшаговая шаблониция, когда в начале генерируется основной контент, а затем он вставляется в мастер шаблон. В ZF для этого есть layouts. Подключаем их в конфиге
resources.layout.layoutPath = APPLICATION_PATH «/layouts/scripts/»
При этом будет по дефолту рентериться layout.phtml. У себя я практикую подмену мастер шаблона на ajax.tpl.php, в ZF это можно сделать через плагины или бутстрапы, но они меня пугают своей кривой документацией и примеры из мануала зачастую не работают. Можно использовать смену контекста AjaxContext, но опять же у меня возникли проблемы, да и это не очень мне нравится.  Поэтому, следуя принципу KISS, я решил наговнокодить прямо в основном лэйауте.
Пройдёмся по коду. В начале шаблонов я пытаюсь организовать хоть какой автокомплит подсказав IDE что $this — это Zend_View и благодаря этому получил подсказки на публичные методы, хотя можно использовать protected и private, но на безрыбье и рак — рыба.
Затем спрашиваем у реквеста на AJAX ли запрос $request->isXmlHttpRequest(), благо это zf умеет, а фича определяется на основании заголовков.
Собственно для AJAX нам нужно выплюнуть тупо часть нагенерированную экшином <?php echo $this->layout()->content; ?>, а для обычных запросов отдаём как положено c head, меню и т.д.
На этом можно было бы заканчивать повествование, т.к. теперь всё можно запрашивать через AJAX, но раскажу о парочке строк js.
<?php echo $this->jQuery(); ?> — это подключение jQuery, для этого используется библиотека ZendX, которая является не обязательной, поэтому можно вручную прописать пути к jQuery и jQuery UI, это будет даже более KISS.
Теперь вешаем на ссылки с классом  «ajax» запросы AJAH. По умолчанию всё будет грузиться в div#conteiner, но для удобства можно прописывать другой контейнер в атрибуте ссылки  ajax-container, указав в нём jquery селектор, например, ajax-container=»#conteiner» или container=»#conteiner2″. Так же можно выводить в модальном окне, указав класс ajax-modal.
Формы я заварачиваю в div <div id=»form-conteiner»> и прописываю хук, чтобы он перехватывал обработчик отправки и отсылал форму AJAX-ом.
Данное решение имеет большой минус — загрузка файлов, поэтому для таких вещей лучше заворачивать форму в iframe. Второй минус — закрытие окна после загрузки. Для этого нужно возвращать строку js для закрытия диалога или обновления страницы.
Я обычно не делаю формы на ajax. При том, что всё может работать на AJAX буквально одной строкой кода, но предпочитаю олдскульные перезагрузки, без геморроя с утечками, файлами, сохранением URL и history. Будь осторожны, не злоупотребляйте.
P.S. Очень хотелось бы услышать критику и советы как нужно делать. Потому как  я после выхода ZF 1.0 забил на него и лишь занимался доработкой проектов, а сейчас впервые начал делать с нуля и делаю всё по старинке, подходом который использую в своём фреймворке. Так что учите меня.
Meetup в Гродно: дизайн и юзабилити
27 января 2011 года в Гродно прошёл meetup по дизайну и юзабилити. И я там был, сок-кофе пил. Но начну с несколько иного события, которое расскажет как я туда попал. Из большой маминой семьи лишь она одна не переехала в Гродно, куда отправились два родных брата и сестры, а мамуля как старшая осталась на деревне и занималась так называемым фармингом, зарабатывая ресурсы для помощи младшим. И недавно любимая тетя получила квартиру, во многом этому поспособствовал муж, который не стал сидеть на печи в кризисной стране, а подался на заработки в Россию, чего и всем остальным белорусам советую. Ну и мы отправились в Гродно, отмечать сей приятный факт.
Но это лишь первая часть, вторая заключается в том, что 17 декабря под Минском пройдёт великое по меркам страны событие — грянет Веборуб, где соберутся  лучшие из активных веб разработчиков. Его проводят организаторы phpconf и devconf, а так же благодаря своевременному предложению и активному участию Якубовского Андрея. Я вношу свой малюсенький вклад распространяя информацию об будущем евенте. так и попал на сайт meetup.by, где и обнаружил что гродненский евент как раз совпадает со сроками моего прибывания в славном городе Гродно.
Теперь о самом meetup.by. Меня поджидала неприятность, когда пытался найти место проведения, оказалось что здание запряталось в глубине дворов и я дважды проходил мимо тужась его отыскать, но таки нашёл. Первым был доклад владельца проекта meetup.by и организатора сего события. Он рассказывал об основах юзабилити и зачем это нужно. Придраться я к сожалению не нашёл к чему, но поверьте на слово — это страшный человек, иначе как он мог на своём ресурсе забыть сделать раздел  для евентов разработчиков на великом и могучем PHP. В кофе паузе пообещал исправить и тогда сразу обелится в моих глазах.
Следующим был рассказ ещё одного человека чьего имени я не запомнил Вадим Шмыгов, но чьи работы знает каждый пользователь байнета. Он рассказывал об инфографике. У него несколько атипичный подход с использованием не статичной картинки, а динамических на флеш. Очень здорово, наглядно. информативно, полезно. Огромный минус, что его графики не согласованы с политикой государства и нагло врут, утверждая что у нас в стране кризис, инфляция и рост стоимости зелёных бумажек, да ещё и цены на бензин растут.
Третьим был самый полезный доклад. где на деле можно было увидеть всю надобность юзабилити. Дизайнер на примере своей работы пытался показать где он использовал принципы, а зал подсказывал, где бы не помешало ещё поработать над макетом. Докладчик молодец, держался стойко и вёл себя адекватно, не глядя на критику, зачастую безосновательную. Единственное чувствовалась что человек начинал и много времени провёл на фрилансе, уровень работ как и дизайнеров проработавших год в хорошем коллективе, хотя опыта по утверждению между 5-10 годами. Особенно бесят иконки из клипартов, которые даже цветовой схемой не подходят на сайт, после ромкиной роботы над мелочами это особенно заметно. Но этот недостаток легко исправляет контролем и правками выбивающихся из его же стиля моментов, тем более человек вёл себя под стрессом очень адекватно, что редкость для фрилансеров.
Мне понравилось, огромное спасибо организаторам и девочке Юле, которая без доклада, но направляла докладчиков и дискуссию в нужную сторону. Спасибо ребятам, которые меня довели до нужной автобусной остановки и спасли от поисков и расспросов прохожих. К сожалению, моя избирательная память не распространяется на имена и фамилии, так что простите что всё так анонимно.
p.s. Поставил себе в тудушку пункт о статье юзабилити vs конверсия, а то я в кофе паузе узнал, что существует заблуждение, что проекты делаются лишь для фана, а тз нужно писать за раз и по советским ГОСТ-ам.
p.p.s. Если ты рубишь в вебе, приходи на веборуб в Минске.
p.p.p.s. Я обещал одному из докладчиков подсказать библиотеку для приведения текстов в нормальную форму http://phpclub.ru/talk/threads/%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B0%D1%8F-%D0%BC%D0%BE%D1%80%D1%84%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D1%8F.45119/
Комбинаторика, нахождение слагаемых по сумме
Я начинал свой программистский путь с выполнения лаб по Delphi для друга и желания замутить свой футбольный менеджер. С первым у меня всё получилось, и товарищ благополучно отстрелялся, а с футбольным менеджером не вышло и вряд ли получится, потому что я теперь осознаю что не смогу сделать графический показ матча, как у конкурентов. Но у той мечты есть положительный момент — я столкнулся с комбинаторикой.
Вот один из примеров, служит для нахождения слагаемых по известной сумме. Алгоритм вроде бы не совсем мой, а переписан с варианта на pascal.
Этот алгоритм остался бы у меня в закромах, если бы не случайный вопрос на форуме phpclub. Да и руки давно не доходили до блога, решил совместить.

Ciklum PHP Saturday
Я до сих пор не могу в поверить, но ЭТО случилось — я побывал на первой белорусской конференции веб разработчиков, где мне ВСЁ понравилось. Мне прямо сейчас нужно активно работать и нагонять время потерянное в отпуске, но не могу сдержаться и буду писать отчёт о Ciklum PHP Saturday. Это встреча php разработчиков, которая прошла в Минске 13 августа 2011 года.Начну из далека и расскажу пару слов о Ciklum. Мне посчастливилось и я некогда побывал в этой интересной компании на собеседовании.  С порога Вас встречает уютный и домашний офис, в котором есть кухонька (моё любимое рабочее место) и нет огромных бараков с рядами программистов. Насколько я помню, в их блоге есть фотографии. Ах, совсем забыл о HR-ах, я встречался с Ольгой Кузнецовой. Беседа была очень тёплой и интересной, я даже опоздал на наш вечерний киккер с друзьями.  Что же я узнал? Надеюсь ничего не напутаю, пишу по памяти. Компания Датская, имеет офисы в нескольких странах, в Беларуси где-то с сентября 2010-го. Они занимаются не аутсорсингом персонала, очень интересная модель и Вы фактически работаете в западноевропейской компании и занимаетесь чисто её проектами. Здесь кроется важный момент — нужен хороший английский, т.к. фактически идёт прямое взаимодействие с заказчиком, а не проходит через менеджмент.
Теперь к нашим мухоморам. Мероприятие проходило в офисе ТУТ БАЙ, за что им огромное спасибо. На входе я добыл то, ради чего все ходят на подобные конференции — ручку, а то они у меня грызутся как семечки и страдаю вечной нехваткой. Сравнивая размеры помещения и количество народу в списках было страшно что не уместимся даже по 4-ре человека на место, но как обычно явилось значительно меньше и мы практически все вместились, лишь парочке человек пришлось заархивироваться. А уж как начали опрашивать сколько людей программирует на php, то была совсем печалька и руки подняло около трети. А уж тем, кто занимался менеджментом в айти, знает — такие числа нужно делить как минимум на 3.
Первый доклад «Crazy things done on PHP«. Украинский докладчик Тарас Калапунь демонстрировал исходники, после которых мне стыдно называть свой блог «извращения», у меня здесь лёгкий петтинг. Работа с ldap, бинарными данными и протоколами, подготовка отчётов, демоны — всё то, для чего php считается не очень приспособленным, но хорошо вписывается в общую инфраструктуру и кое-как справляется. Было очень интересно, вещи действительно не тривиальные.
Затем Дмитрий Вовк показывал быстрый фреймворк для прототипирования бэкендов мобильных приложений, генерирующий JSON. Было много глупых вопросов — почему не Zend Framework. PHP — это не java, где можно пить кофе пока компилится, но тяжёлый фреймворк типа ZF в сравнении с лёгким ворует около 20 минут в день. Конечно время обычно нагоняется за счёт огромного функционала, но здесь ПРОТОТИПИРОВАНИЕ. Но, даже на таком фреймворке можно спокойно делать серьёзные вещи типа ERP.
Третьим докладчиком от ТУТ БАЙ —  Игорь Обернихин. Интерес доклада заключался в том, как происходит переход олдсукульного проекта на новые рельсы. Как стало понятно всё новое внедряется постепенно и не в полном объёме, адаптируясь под требования их бизнес модели. Опять же зал отжигал вопросами «Почему не SCRUM«, «Почему не mercurial» , забывая о возрасте проекта и то, что это не аутсорсинг. У меня сложилось впечатление, что у них слишком много менеджеров, влияющих на разработку, поэтому проект качественно медленно развивается и растёт лишь в ширь за счёт интеграции сервисов и сторонних проектов. После доклада Игорь ответил на вопрос о wordpress, применяющийся для их блогов, его таки пришлось допиливать.
И вот дошли до главного эпик фейла субботней встречи — в перерыве нас угощали пиццей и это была не из обожаемого Pizza Peperoni. Я словно окунулся на пару месяцев назад в тёмное прошлое, когда солнце было не такое яркое, небо не такое синее, а пицца не такая фантастически вкусная.
После обеда должен был быть доклад про Drupal, но, к счастью, его не случилось, и организаторы попросили стартапщиков рассказать о проблемах возникающих у них на проекте, нашлось двое смелых. Первый спрашивал о многопоточной обработке в php и сводился к использованию очередей (German, RabbitMQ) совместно с паттернами Unit of Work + Command. Правильный ответ сходу дал следующий стартапщик, разрабатывающий портал экстремальной жизни. Он же затем спрашивал как решить проблему со скоростью выборок много ко много в SQL, задача усугублялась использованием ORM. Здесь уж я взял слова и предложил три варианта:
1. денормализация и хранение ссылок в дополнительном поле в сериализованном виде.
2. тупейший совет использовать mongo, который абсолютно не  подходит к задаче, но звучал солидно за счёт NoSQL.
3. вроде самый адекватный выход — не использовать JOIN, а делать парочку простых запросов по Pk, дополнив это кешем.
4. Сам вопрошающий дополнил третий совет возможностью использовать HandlerSocket для MySQL.
Ребята в принципе оба знали как решать свою проблему и лишь интересовались вариантами. А вот разработчик экстремального портала и вовсе кабан в программировании, которому сложно рассказать о чём-то новом, чего бы он не знал.
Рассказ про ModX я хотел было пропустить, но остался и не зря. Иван Климчук здорово отстрелялся, тем более я был немного в теме, наши дорожки с этой CMF как-то пересекались. Система растёт, развивается и становится не такой ужасной, а местами даже очень вкусной. Идея дерева объектов, ИМХО, идеальна для небольших и средних проектов.
И самое сладенькое — представитель ПронтоСофт Максим Барышников. Ребята делают настоящие хайлоды. Максим рассказал пару историй о проекте irr и про то, как они слезли с иглы баннерокрутилки и сделали свою с блекджеком… Естественно, сложно рассказать  в докладе что-то новое про хайлоды, здесь кроме архитектурных решений важна ещё и реализация. Хотелось бы чтобы ПронтоСофт почаще показывала люду своих бойцов, чтобы они делились опытом, а то на конференции было целых три представителя украинского офиса Ciklum.
Ну и напоследок Сергей Парижский рассказывал про боянистые бояны и безопасности в PHP. Те кто считает что бояны плохо — вам в врачу Артемию Лебедеву. Подобную тему нужно поднимать на каждой конференции по php, давайте будем делать интернет безопаснее.
Организаторы сумели добавить сочку в сухое айтишное мероприятие, разрешили задавать вопросы по ходу и обсуждения шли настолько живо, что в twitter кто-то даже жаловался, мол никто из докладчиков не подготовился толком. Ясное дело — это полнейший бред, никто из докладчиков не плавал, что при формате близком к митапу — серьёзное достижение. В twitter скепсиса было очень много, но это типичная позиция белорусов — не участвовал, но осуждаю. Я тоже по началу не радовался  ModX и Drupal, но поучаствовал и проникся.
Ну а про афтопати рассказывать не буду, только намекну, что было так хорошо, что всё закончилось ближе к утру в Doodah King, где мы наслаждались живой музыкой.
Спасибо ОГРОМНОЕ всем, кто организовал и участвовал в этом празднике.
p.s. У меня за понедельник уже 3 предложение о работе, так что конференции это хорошая площадка где можно людей посмотреть и себя показать.  Даже модераторство в phpclub, не даёт такого профита :(. Но я работой пока активно не интересуюсь, как минимум до осени на вольных хлебах.
Yandex и приватные данные
Недавно прошла целая волна эпик фейлов с участием Яндекса, Яндекс метрики и криворуких программистов. Особенно радует позор и уязвимость shop script от Webasyst, который является коробочным решением и доказывает опасность такого выбора. Это очень хороший аргумент в общении с заказчиком, когда захочу всучить кустомное решение.
Вот решил высказать своё ИМХО по поводу происходящих вещей. Ситуация не стоит и выеденного яйца, но даже среди разработчиков оказалось много тех, кто не доехал до сути проблемы.
Пункт один. У нас есть боты, которые шныряют по доступным урлам и ищут там информацию. Стоит отметить что это не только поисковые поты Яндекс и Google, но и множественные парсеры, которые собирают информацию для себя, а не публикуют её в общедоступной выдаче.
Пункт два. Есть Павлики Морозовы, которые стучат о посещённых пользователем урлах. В случае с shop script стучала Яндекс метрика, чего yandex не отрицает. Но не метрикой единой, таких Павликов у нас много: провайдеры, прокси сервера, счётчики, баннеры и даже браузеры (так реализована антифишинговая защита).
Пункт три. Собственно корень всей беды — адреса страниц были доступны по «секретной ссылке«, без авторизации с расчётом на то, что эту ссылку никто не узнает. Особо хитрые партизаны всовывают к такие ссылки идентификатор сессии, тем самым ограничивая жизнь ссылки на время существование этой самой сессии. ТАК ДЕЛАТЬ НЕЛЬЗЯ. Казалось бы на это б нужно ставить точку, выпороть глупых программистов, извиниться и компенсировать урон пострадавшим.
Есть даже рекомендация w3c не доверять GET (спасибо пользователю VolCh)
Because the source of a link might be private information or might reveal an otherwise private information source, it is strongly recommended that the user be able to select whether or not the Referer field is sent. For example, a browser client could have a toggle switch for browsing openly/anonymously, which would respectively enable/disable the sending of Referer and From information.
Clients SHOULD NOT include a Referer header field in a (non-secure) HTTP request if the referring page was transferred with a secure protocol.
Authors of services which use the HTTP protocol SHOULD NOT use GET based forms for the submission of sensitive data, because this will cause this data to be encoded in the Request-URI. Many existing servers, proxies, and user agents will log the request URI in some place where it might be visible to third parties. Servers can use POST-based form submission instead
Но дальше ситуация начала развиваться не правильно. В первую очередь виноват Яндекс, который вместо короткой фразы «ТАК ДЕЛАТЬ НЕЛЬЗЯ (тчк)», принялся рассказывать о robots.txt метатегах для запрета и управления индексацией.
Пункт четыре. Ваша информация доступна не только поисковикам и не все боты следуют рекомендациям поиска, а многие наоборот стараются лезть туда, где рекомендуют не рыться. Нельзя рассчитывать на robots.txt, мета теги и прочие инструкции, которые могут игнорироваться случайно или умышленно.
Пункт пять. Почему разработчики ставят на «секретные» страницы метрику, счётчики, баннеры и прочую лабуду, запрашиваемую с других доменов, ставят не заботясь о вставляемом коде и что именно он делает. Это самый страшный пункт, потому что фактически разработчики приводят незнакомца в дом и оставляют его наедине с нажитым добром. Зачастую даже эти баннеры и счётчики месяцами не отображаются, что делают их разработчики неизвестно, а главное — за это никакой ответственности не предусмотрено.
Пункт шесть. Постыдно, что разработчики пытаются сложить часть вины, а то и всю на Яндекс, который в данной ситуации виноват лишь в том, что хорошо делал свою работу. Постыдно, что разработчики не понимают простых вещей, что нельзя давать свободный доступ в персональной информации лишь на основании «секретной ссылки», сколько бы раз она не была закрыта от поисковиков.
ТАК ДЕЛАТЬ НЕЛЬЗЯ
Задание на php для новичка
Я уже писал о том что стоит читать новичку, теперь продолжим переходя от теории к практике. Очень часто начав изучать php новички приходят к моменту, когда хочется опробовать свои силы в реальной разработке или даже попробовать устроиться на работу. Перед ними встаёт вопрос «с чего начинать новичку«, «какой первый проект написать«. Самое удивительное, что зачастую они пытаются придумать нечто экзотическое, а нужно писать типичный проект. Один из распространённых советов — напиши гостевую книгу, это не плохой вариант, но и не лучший.
В реальной жизни веб программисты оперируются всего парочкой типичных задач — вывод списка записей, просмотр одиночной записи, редактирование-добавление, удаление-изменение единичного параметра, работа с деревьями (её в некой степени можно аппроксимировать до вывода списка). Ещё важным моментом является работа с фалами, особенно изображениями.
И так, на основании этих требований я составил задание, которое будет покрывать 80-90% знаний необходимых для новичка.
1. админка.
1.1 добавление (с возможностью прикрепить картинку)
1.2 вывод списка (с разбивкой по страницам, сортировкой и фильтрацией)
1.3 удаление (не забываем про картинки)
2. пользовательская часть
2.1 просмотр списка новостей с разбивкой по страницам и сортировкой (по умолчанию последние добавленные первыми), не забываем выводить при наличии картинки её уменьшенную превьюшку.
2.2 просмотр одной новости, выводим превьюшку картинки и при клике на ней с помощью lightbox показываем большую.
Бонусом будет, если будут категории новостей и вывод категории рядом с новостью используя LEFT JOIN
У профессиональных программистов есть одна тайна, которая никогда не скрывается, но постоянно не усваивается новичками — главное не как работает код, важнее как он читается. Для улучшения читабельности есть code style, который поясняет как именовать переменные-функции-классы, как ставить отступы и т.д. Не важно какой у вас будет стиль, главное чтобы он был единым в рамках проекта. У IDE есть возможность авто форматирования, но лучше новичку на первых порах оформлять код самостоятельно, а не через alt-shift-f, это помогает улучшить собранность, концентрацию и самоорганизацию.
Это такая клёвая штука, которая позволяет делить код на говнокод и божественный. Если вы используете MVC, значит у вас классный код. Это конечно бред, не нужно придумывать себе священных коров. Нужно понимать MVC — разделяй код на автономные части, которые занимаются только своей работой. Пока стоит оперировать только тремя сущностями.
Контроллер принимает запрос и вызывает нужный метод для получения данных из модели, затем эти данные  каким-то образом становятся доступными вьюхе.
Теперь это в коде:
В модели работаем с базой данных, забудьте о mysql_*, эти функции морально устарели, да и уже официально объявлены deprecated и могут не оказаться в новой версии php. Есть PDO и mysqli_*, которые умеют работать с prepare statment — когда сразу посылается запрос, а затем данные, таким образом нельзя кривыми данными совершить SQL Injection.
Во вьхе делаем вывод этих данных
На этом пока всё, для прокачки дальше, стоит не писать новый модуль, а рефакторить и расширять существующий код. Писать с нуля всегда легко, сложнее дописывать и править баги.
Социальная безысходность Google
На днях Google решил сделать очередную попытку пробиться на социальный рынок. Всё началось с установки кнопки +1, которая является аналогом фейсбуковским лайкам. Но оказалось что появляется не только кнопка, а целый сервис google plus (google +). В целом ничего инновационного они не сделали, практически всё есть в facebook и vkontakte, но у гугла местами удобнее, а местами понятно только гикам. Интересным может быть только видео комментарии, да и то. практика видео звонков показала, что люди не любят светить своё лицо при общении, предпочитают скрываться за аватарами.
Но обсудить хочется не это, а их систему инвайтов. Помним мы, как точно так же начинал усопший Google Wave. В принципе гугловские инвайты — это этакий фейк, потому что каждый зарегистрировавшийся может притащить ещё определённое число пользователей, т.е. количество зарегистрированных фактически не регулируется, лишь создаётся занавеса избранности.
Так как сервис — социальный, значит люди должны прийти сами и привести весь свой круг общения. Естественно, все коммуникабельные пользователи получили инвайты на google plus уже в первый день. Но есть одно большое НО — гугл это тусовка гиков и в сервис кроме них никто из обычных пользователе не перелезет со своих обжитых аккаунтов в вконтакте и на фейсбуке.
А дальше начинается та самая безысходность социальных проектов из заголовка статьи. О сервисе начинают писать и в комментариях появляются орды гиков, желающих заполучить аккаунт в этот самый социальный google +. То есть получается, что весь этот народ так и не нашёл в своём кругу общения знакомых имеющих инвайты. Почему же так?  Потому что гики не очень то социально активные люди, они больше любят девайсы, нежели людей.
Понятное дело, что среди гиков есть и представители с тысячами фолоуверов в твиттере, сотнями друзей в реальной жизни, но их не так много в общей массе гиков. И такие люди явно не уйдут из других социалок, потому что среди их круга общения есть масса людей пользующихся поиском яндекса и зарегистрированных только в вконтакте, даже без аккаунта в православном фейсбуке.
И если на wave действительно были какие-то надежды, то у google plus такая же безысходность как у google buzz, который не может соперничать с не гиковским твиттером, к котором регистрируются даже политики, актёры, футболисты и прочие интересные всем люди…
Постепенно начинается обсуждаться вопрос, как отключить google plus, ещё один привет истории buzz. Я вот тоже посмотрел, пощупал. покрутил и собираюсь забыть.
p.s. Если кому из знакомых нужен инвайт, пишите, обязательно пришлю, т.к. раздавать незнакомым не собираюсь и инвайтов хватит на всех знакомых гиков.
Убиваем плохой плагин без загрузки netbeans
Недавно сделал большую глупость и установил на netbeans 7.0 плагин для поддержки smarty. Раньше пользховался этим очень хорошим плагином, но толи в новой версии netbean ситуация изменилась, толи плагин так испортился. В общем, после установки ничего не подхватилось, решил перегрузить IDE и приплыли, загрузить по новому не получилось, примерно на 70% индикатора загрузки процесс остановился.
Бросился в интернеты, искать как загрузить netbeans в режиме safe mode, чтобы не загружались все плагины и можно было в настройках отключить бажный. Ничего не нашёл. Пришлось выбрать иной путь и покопаться в конфигах, благо они в xml.
Делюсь навыком отключения плагина в netbeans через конфиги. Задим в папочку пользователя и следуем по пути .netbeans\7.0\config\Modules\ там и находим наш плагин, открываем в редакторе и видим такую структуру
Соответственно нужный нам параметр enable выставляем в false и спокойно загружаемся. После загрузки я опять активировал плагин и больше проблем с загрузкой не было. Но вот плагин так и не подхватил tpl, даже когда создавал новый через визард и выбирал smarty template. В итоге пришлось отказаться от него. Благо у меня всего 1 проект со smarty.
Тестовое задание и вопросы на собеседовании для программиста
Не очень то хочется писать своё ИМХО и получать ярлык «недооценённого гения», но вот приведу очень хороший комментарий, с который совпадает с моими наблюдениями. Читайте под катом.
Менеджер проектов в УНИС
Что касается тестового задания. Частенько они с большой стоимостью имплементации:
— Первый случай: на вход даются два многоугольника в файлах, нужно написать алгоритм их сложения, пересечения и XOR — выходные координаты тоже в файл. Сторонние библиотеки (даже системные, которые умеют это делать) использовать нельзя. Расчет на 4-8 часов (С#). Учтем, что код на проверку надо писать красиво, очень архитектурно, с обработкой эксепшенов, с ремарками, в стилях и хорошенько оттестированным (а может быть даже с юнит тестами). Так вот у меня несколько ремарок по этому поводу. Как по мне очень нескромно отнимать у соискателя 8 часов — он на них еще не работает! Второе: я бы очень хотел иметь в своей команде человека, способного даже не создать свой, а найти и заимплементить готовый алгоритм за 8 часов (с учетом вышеперечисленных требований). И последняя: если они ТАК оценивают задачи, то КАК мне там будет работаться?!. Долго смеялся когда HR на мое возмущение ответила, что у них был мальчик, который за выходные сделал, но его не взяли — код неструктурированный был.
— Второй случай: двузвенка с тремя сущностями, CRUD и спецлогика, 4 часа (C#, VS2010). Тут еще с горем пополам можно было вписаться (опять же учитывая всю красоту), но лично я нарвался на тонну проблем в VS2010 со связыванием и намного превысил это время. Когда от проверяющего я услышал возмущение почему нет MVC, сортировки и фильтрации, которых не требовали по описанию, но я видите ли должен был догадаться, что так будет неудобно, меня просто порвало.
Я считаю такие задания и отношение к их выполнению банальным неуважением к соискателю. Сюда кстати нужно добавить логические задачки, которые многие любят. Надо ходить со своими — предлагать решить, пока делаешь ихние. А че, мне начальник-дурак тоже не нужен.
Что касается устного собеседования:
— Я называю это «шпильками». Собеседователь знает несколько сложных неочевидных вещей и начинает ими «понтоваться» перед соискателем. Из разряда задач i++ + i++ и т.п. В этом случае предлагаю в ответ загнать пару шпилек от себя, чтоб неповадно было. На самом деле эта ерунда в работе в 99% случаев не нужна.
— Прогонка по теории. Если институт был давно и за плечами много лет суровой практики вы уже навряд ли вспомните, что такое сложность алгоритма и какие есть методы сортировки. Да что там, что такое полиморфизм? -вот вопрос века! Все понимают, а объяснить толково могут немногие. В общем перед собеседованием нужно прошвырнуться по структурам данных, ООП, алгоритмам, паттернам и пр. Опять же, правильные ответы не гарантируют, что вы хороший программист, но они их любят, поэтому учите. Я вспомнил случай, когда нанимали на работу девелопера — выбрали одного, который единственно ответил на все теоритические вопросы, т.к. был дважды сертифицирован мелкомягкими и видимо поднатаскался в ихних тестах, но на практике оказался вообще никакой — переломал всю систему, еле избавились…
— А поговорить?. На одном 2-х часовом собеседовании я говорил наверное процентов 30, остальное время собеседователь рассказывал свой опыт, удивлялся моим решениям, предлагал свои, спорил. Это был кошмар — и остановить как-то неудобно и свое время зря тратишь.
— Многие работодатели даже не подозревают наверное, что не только соискатель у них, но и они у него на собеседовании. Бывают так увлекаются, что забывают рассказать о себе, предложить задать вопросы и т.д. Друзья, не стесняйтесь задавать самые коварные вопросы, в том числе и финансовые, расспросить об условиях труда и отдыха, попросить показать рабочие места и т.д. Если придете к ним на работу уже будет поздно. Ну и естественно навести все справки, которые только можно по этой конторе.
 
Разработка на фреймворке fatfree
Недавно взялся за проект на микрофреймворке fatfree или как его ещё именуют F3. В целом, этой мой первый серьёзный опыт работы с такой крохой,  весит он всего 55k. При этом очень шустрый, имеет готовые решения:
Выглядит всё это довольно внушительно, примеры уровня «Hello world» смотрятся потрасающе, но что будет, коль копнуть поглубже.

Начинаем. Нам нужен php 5.3. Вау, я ожидал массу фишек, а оказалось, что это скорее рекламный ход. Здесь мы встречаем первую неожиданность -неймспейсы ни то чтобы не используются, а даже наоборот, всё валится в единую кучу. Имеется базовый класс Core и все наши переменные сунутся через F3::set в self::$global. Понятное дело, что в серьёзных проектах большая вероятность переписать переменную и сломать всё к чертям.
Ладно, будем аккуратны. Начинаем писать основу для лёгкой конфигурации и какой-никакой MCV. Очень советую при скачивании fatfree скачать и примеры блога построенные на нём. Здесь мы обнаруживаем первый плюс, изначально продумано наличия dev и production версии, у нас есть переменные RELEASE и DEBUG, хотя ведут себя они странно.
Я работал с последней стабильной версией fatfree 1.4.4, в котором оказалось парочка критичных багов, особенно много проблем оставило решение для работы с базой данных. В трекере нашлось 2 серьёзные заплатки к данной версии и то, одну пришлось доделывать самому. Неприятная особенность, что при разработке с включённой отладкой ошибки не отображаются, если используется редирект F3::reroute.
Очень полезным явлется возможность использование ini файлов, значения из которых по сути являются аналогом F3::set($key, $value); Конфиг подключается через F3::config(‘config/config.ini’); В примере блога есть серьёзный баг и этот конфиг не закрыт от доступа по прямой ссылке, поэтому я создал отдельную директорию для конфигов и закрыл её через .htacccess
Настроив конфигурацию и инициализировав нужные данные дошла очередь до написание первого контроллера.  И здесь случился самый толстый минус — невозможно работать нормально с классами для контроллеров. Контроллеры можно задавать кучей способов:
Использование объектов было бы предпочтительнее, потому что поддерживает нормальное наследование, состояния и вызов через $this. Но в способе 4-ре нужно передавать именно объект, иначе будет статический вызов в обход конструктора класса. Но все роуты необходимо прописать до вызова диспетчеризации F3::run(). Естественно плодить объекты просто для роутеров не хочется и пришлось смириться со статикой, которая, как мы знаем, не является ООП. Я использовал вариант три, его очень удобно прописывать в ini конфиге.
Для того, чтобы вынести все контроллеры f3 в отдельную папку я задал F3::set(‘AUTOLOAD’, ‘application|autoload’); Подгрузка осуществляется примерно так:
Я лишь в самом конце просёк фишку, что для автолода можно прописывать несколько папок, до этого всё складывал в одной папке и плагины, и контроллеры. «смешались в кучу люди, кони …». В примере ООП блога с их сайта делалось точно так же, в документации тоже нет намёка, спасло копание в коде.
В контроллере мы используем в основном F3::set F3::get для работы с глобальными переменными, которые в последствии могут использоваться в других action и в шаблонах. F3::call позволяет вызвать другой action. Вот пример:
Очень неудобно делать валидацию и работать с переменными через set-get и особенно их скрытые варианты
Но в целом реализация так себе, лучше чем без фреймворка, но хуже чем с нормальным.
Я уже показал работу с моделями, используется паттерн active record, миниманилистическая реализация, довольна удобная для простых операций, но имеет массу глюков. Сложилось впечатление, что это рудиментарный элемент, так как разработчики предпочитают MongoDb, класс для которого есть, а Axon даже не тестируют перед релизом. Подробнее можно посмотреть в документации на сайте, она довольно подробная и радует глаз.
Теперь шаблонизатор. Это наиболее понравившаяся вещь. Используется html синтаксис для тегов <F3:check if=»{preg_match(‘/404/’,@ERROR.code)}»> и {} для простой вставки переменных или вызова разрешённых функций. Но вот пропитанность регулярками это зло. Недавно на phpclub.ru пользователь grigori демонстрировал как можно заставить падать в корку php подсунув на валидацию строку из 180 символов с необязательным (.*).
Конструкция <F3:include href=»tpl/{@ERROR?’error’:@template}.htm»/>  позволила легко реализовать двухшаговую шаблонизацию с мастер и слейв шаблоном.
Но и он не без багов, у меня возникли проблемы при использовании {} в шаблонах для писем, которые брались из базы.
На сим первая часть заканчивается. Общался с заказчиком и он разрешил использовать наработки по его проекту для статьи, так что в следующей части буду демонстрировать код и выложу исходники каркаса для быстрого старта.
Парочка скриншотов рабочего стола программиста
В твиттере вступил в переписку с фоловером насчёт удобства разработки под linux и windows. Я ранее писал пост рабочем месте программиста, а сейчас решил наделать парочку скриншотов для тех, кто не понимает какое счастье находиться в лоне заботливой корпорации добра — microsoft. С каждым днём я всё больше подседаю на их продукты, надёюсь, когда нибудь весь софт у меня будет лицензионный, но пока меня мучает совесть. Но совесть я готов идти на некоторые компромиссы с совестью.
Самая большая прелесть это сама windows 7. У неё очень удобная панель задач, которую очень здорово дополняет бесплатный для некоммерческого использования Dexpot. Теперь у меня есть несколько рабочих столов. Аллилуйя.
Ниже будет много картинок.
На первом скриншоте у меня виртуальная машина с ubuntu server. Там у меня есть командная строка и всё плюшки linux сервера, приблежённого к боевому.
Затем идёт Total Commander с плагинами, хоть он и однопоточный и писан на delphi 3, но конкурентов у него нет ни в виндоус, ни в линукс.
Следующий chrome c парочкой плагинов, но надо возвращаться к Opera с которого я соскачил из-за отсутствия поддержки gmail offline, но сейчас её нет и в chrome. Поэтому для постоянного хранения почты у меня MS Outlook, а то как-то gmail потерял пол сотни писем.
putty или kitty использую для работы с виртуальной машиной, notepad++ для быстрой правки одиночных файлов, но в большй степени у него на табах открыты нужные мне текстовые файлы. HeidiSQL для работы с базой, в нём куча маленьких плюсов, которые навсегда вытеснили из моего сердца phpmyadmin, хотя его я тоже иногда использую. Плюсы HeidiSQL — скорость, логирование, удобное редактирование структуры базы, выполнение только выделенных запросов на вкладке Query и сохранение этих вкладок, иногда там собирается целый зверинец полезных на стадии разработки запросов, офень удобная сортировка и фильтрация.

Затем skype, который все ненавидят, но все пользуются. В день когда я писал этот пост обновил клиент, а то у многих был в офффлайне и сообщения иногда доходили с 10-ти минутной задержкой. Надеюсь, когда MS вступит во владение своей покупкой, они пофиксят эти многочисленные баги и добавят интеграциию с MS Office.
Следующая мегапрограмма Xmind, служит для планирования моей работы посредством mind карт. Так же на основании этих карт получается удобная документация. А недавно знакомый моляр Роман Малашков, который променял свой бесценный дар раскрашивания заборов на низкокачественную мазню веб дизайнера, посоветовал онлайн сервис для коллективных mind карт http://www.mindmeister.com/ru. Я люблю его подсовывать клиентам, которые не могут объяснить как они видят свой проект, а тз написать для нетехничного специалиста сложно, куда легче последовательность действий step by step.
Дальше идёт тулза для сравнивания и мержинга файлов и даже целых деревьев. Очень приятный интерфейс у Araxis merge, дополняется умнейшим мержингом, но весь кайф портится высокой ценой в €199. Поэтому я пока поставил её в ряды коммунистического наследия и тихонько юзаю по потребности. Хотя в netbeans так же наличествует мержинг файлов, но гораздо менее функциональный.
 Следующим идёт IDE от Netbeans, один из немногих продуктов, который прибавил после покупки sun-а корпорацией «зла» Oracle.
Ну и ещё один представитель неповторимого и великолепного MS Office — Word, комментариев не нужно.
В  трее у меня масса программ, самые важные… Проигрыватель AIMP, я им слушаю айдиокниги и иногда музыку, но чтобы не потерять место в книге иногда слушаю музыку windows media player-ом, он для этого даже больше подходит, особенно работа с библиотеками. Говорилки skype и QIP infium.
А теперь его величество блокнот. Что только не умеет делать эта кроха: записи, напоминания, вставка изображений и мультимедиа файлов, рисование и т.д. и т.п. Не представляю как мир существовал без неё. Жизнь следует разделить на две части — жалкое и унылое существование без неё и прекрасная, беззаботная ЖИЗНЬ, когда ты научился пользоваться MS OneNote. Вот мои кракозяблы.
MS Outlook хранит почту и напоминалки, которые, можно ставить прямо из OneNote. Обажаю такую интеграцию. Собственно следующий значок ещё одна часть этой интеграции — Windows Live Mesh. Microsoft, как всякая уважающая себя компания завела облачный хостинг — SkyDrive, вы бесплатно получаете целых 25 гигабайт, есть ещё Mesh — синхронизируемое хранилище на 5 гигабайт, но оно несколько проигрывает Dropbox, т.к. не позволяет легко публиковать файлы. Не знаю, есть ли клиент для неправославного Linux, но для них есть вебморда, их консоль и целая ночь впереди. А вот word умеет хранить документы на SkyDrive и редактировать через web версию, но я ей смог пользоваться две минуты и она упала, потребовало обновить страницу :(.
Ну и ещё по теме интеграции — суперская менюшка, нажимаем кнопочку win и начинаем печатать и получаем поиск и возможность удобного запуска.  Я теперь пользуюсь меню только так, без мышки, без ручного поиска нужного ярлыка. На скриншоте, уже второй рабочий стол, со своей панелью задач и самое главное — со своими не унылыми, новыми обоями.

Есть ещё много разного полезного софта, по большей части он кросплатформенный, но попадаются жемчужины, из-за которых не представляю даже мысли мигрировать на linux, мне здесь хорошо и очень уютно.
SEO советы для разработчиков
Друг решил податься в seo-шники, записался на курсы и в качестве задания раскручивает свой блог по слову seo конкурс. А ещё сегодня, просматривая один сайт вспомнил о работе в seo компании. Как-то Олечка, моя любимый руководитель проектов, прислала мне «руководство к действию». Я его немного модифицировал и до сих пор храню, как необходимый минимум советов по seo для программистов.

Шутливый код на майку
Давненько не писал, в ближайшие дни набросаю пост о Spl решениях для массивов, позволяющих улучшить скорость и работу с памтью при использовании больших объёмов данных.
А пока вспомнил бородатый свой код-шутку, который хотел поместить на майку
Перевод: я подвид гавнокодера с амбициями бога, всегда открыт и готов для пива и недоступен для работы.
Отчёт о «Всемирном дне юзабилити» в Минске
Отмечу сразу, что я предвзят и отношусь не очень хорошо к юзабилити, никогда в неё глубоко не вникал и не работал с дизайнерами интерфейсов. Почти нуб в вопросе, если бы по работе не приходилось с этим сталкиваться, решать как лучше и рыться в нете по теме.
Конференция получилась значительно лучше, чем я скептически ожидал. Организаторы и докладчики молодцы, даже те, кого буду критиковать.

Вступительное слово было забавным, посмеялся, поаплодировал, но утвердился в мысли, что юзабилити — миф. Даже специалисты  не могут создать нормальную страницу с нужной информацией http://wud.usability.by/ , кроме озвученных в вопросах претензий, посылаем луч ненависти за гугл формы при регистрации и отсутствии письма, что всё прошло успешно. Конечно, можно удачно отшучиваться, но клиенты может быть не до смеха. (Обещал предвзятость). Теперь о хорошем Коноплицкий Павел озвучил больную проблему о закрытости белорусских специалистах, которые не любят кучковаться группами больше двух. Павел предложил собираться попить кофе-пива и попалить темы, делиться опытом. Я открыт к такому неформальному общению, так что приглашайте, будем меняться знаниями.
С доклада Артёма Янцевича «Законы простоты. Практика» пришлось отлучиться в середине, моим друзьям понравилось, но их мнение не объективно, так как пересекались в работе с Артёмом. Буду искать видео.
Олег Зибров «К черту гайды? Роль руководств в приложениях для мобильных устройств». Мне доселе казалось, что гайды являются священной коровой огрызков и они игнорят приложения не соответствующие политике партии, не допуская их в свой магазин. Ещё казалось, что представители клана юзабилити ратуют за простоту и максимальную доступность. Судя по словам Олега, всё лучше чем мне казалось. Доклад понравился, учитывая, что я ценю всё же информацию и идею, а не умение искрить шутками и общаться ямбом. Вынес для себя, что некая часть функционала может быть непонятной(сложной) для пользователя, но он в ней разберётся, если ему нужно данное приложение.
Вячеслав Козырев с докладом «Особенности верстки под мобильные устройства» стал для нашей компании самым спорным. Мне он понравился больше всех в первой части, так как было более техническим. Менее подготовленные оказались не готовы для данной информации. А вот друга дизайнера стойко хотелось отпинать за нежелание воспринимать данную информацию, особенно за укореневшее мнение, что дизайн не меняется в зависимости от скрина. CSS3 даёт инструменты верстальщикам, чтобы менять вёрстку в зависимости от горизонтального или вертикального расположения телефона. Верстальщики упорно не используют css фреймворки, дизайнеры так же не хотят вникать в специфику платформу, для которой активно лабают иконки.
Во второй части был самый ожидаемый дизайнером доклад Геннадия Драгуна «Опыт проектирования игровых интерфейсов». Интересно было послушать про столь популярный белорусский онлайн проект World of Tanks, докладчик так же выступал великолепно. Но доклад оказался мимо цели (ИМХО), свёлся к тому, как патчат их дизайн. Это какой-то антипаттерн юзабилити, неужели при разработке так сложно было продумать смену тем и моделей, чтобы пользователям было удобнее заниматься модингом. Самый главный вопрос для меня, который удачно озвучила девушка из зрительного зала, как разбираться с хотелками пользователей, так и остался не раскрытым. Будем тогда прислушиваться методики
Getting Real.
Доклад о OZ.by решили не слушать, так как единогласно было решено, что уж они хорошего не посоветуют. Оценка субъективная, но сегодня при выборе книг убедился, что нужно было оставить только поиск, навигация на сайте слишком неудобная для меня. Но книгу всё же закажу, не смотря на юзабилити. Сестре, оставшейся послушать, доклад понравился или сам докладчик. Тоже постараюсь посмотреть.
Здесь нас ждал первый из сюрпризов дня, расчитывая быстро закупиться пиццей и смотреть доклад уже из дому, мы жестоко ошиблись. Некие мудаки, выбив стекло, стащили магнитолу, на которой им всё равно не удастся подняться в силу её полумертвого состояния. Вызвали кого нужно мы освободились как раз к концу докладов.
А ведь так хотелось послушать Юрия Шиляева, который стал брендом. Юрий прекрасно рассказывает и к вопросам хорошо готов. Наша перепалка после доклада  Вячеслава Козырева показала актуальность темы доклада «Взаимодействие между проектировщиками и разработчиками». Жду видео, а то придётся покупать биту для аргументации.
p.s. В начале второй части в наш сектор ворвался похититель мест, из-за чего пришлось частично перебазироваться. Но это ещё не самое страшное, он был с буком и начал кодить на любимом пыхе, после вида простыни в 2k строк процедурного кода мне поплохело. А учитывая, что большую часть время он тратил на игру окнами в компиз, вообще не понимаю как он умудряется выделять время для конференций. Приглашайте на кофе, поделюсь опытом.
p.p.s. Был ещё великолепный вопрос по проектированию юзабильных интерфейсов для кода. Автору мега респект, поднял очень актуальную проблему. ИМХО, абсолютно лучший вопрос из мною услышанных. Добавил в тудушки о статье по теме, но всё же я не смогу раскрыть её в сферу своей ограниченности в знаниях других языков. Да и тудушка становится неприлично большой, времени даже на №1 о захвате мира не хватает.
p.p.s. Заказываю книгу на OZ.by, адрес доставки нельзя отредактировать, только удалить. При добавлении адреса есть только вариант «сохранить и выбрать по умолчанию». Опять же смущает, что нельзя указать время,не дома же её целый день ждать.
Учёт времени работы
Иногда приходится работать на фрилансе, причём с проектами, время выполнения которых неизвестно или трудно высчитываемо. Для пользователь фриланс биржи oDesc есть удобная утилита для контроля времени. Суть довольно проста: садишься работать, включаешь таймер, время тикает и система наблюдает за тобой, делает скриншоты, смотрит активность кликов мышкой, нажатия на клавиши клавиатуры. В итоге у заказчика есть некая картина того, чем ты занимался всё это время.
Переодически пытался найти такую же утилиту для учёта времени, но не привязанную к oDesc. И вот недавно на хабре дали нужную ссылку на tahometer.com.
Зарегистрировался на сайте и скачал клиент <пользователь>.tahometer.com, где можно после авторизации заводить проекты, добавлять исполнителей. Понятное дело, вещь не бесплатная, но для одного пользователя с одним проектом бесплатно. Так что пощупать удалось по полной. Завёл проект, залогинился в клиенте, запустил таймер и процесс пошёл. Каждые 10 минут делаются скриншоты, по умолчанию их можно смотреть и удалять, в отчёте будет отсутствовать скриншот и заказчик поймёт, что время было потрачено на что-то постороннее.
В панели управления клиент может просматривать статистику за месяц.

Как видно, за 14-го сентября я наработал целых 23 минуты. Теперь можно посмотреть более подробную информацию за день.

Здесь показывается информация по каждому промежутку, есть скриншоты и статистика о использования клавиатуры и о кликах мышкой.

Теперь, можно сгенерировать отчёт, и если выставлен рейт за час, то получится даже время с потраченной суммой. К сожалению, я так и не нашёл, как делать разные рейты для различных проектов и разных промежутков времени, чтобы, например, увеличить рейт в выходные.

Как видно из скриншотов, он даже поддерживает русский язык. Есть декстопные клиенты для Windows, Mac, Linux. Если нужно больше проектов, то можно воспользоваться платным аккаунтом, стоит он не так уж и дорого, всего от 5 до 79$ в месяц.  После чего увеличится колличество проектов до 5-ти. У бесплатного аккаунта судя по всему есть один большой минус — нельзя работать оффлайн.
Буду рад, если кто подбросит альтернативы, с более гибкими настройками. А если меня читают разработчики декстоп приложений, способные соорудить подобный клиент, то можно скооперироваться и запустить такой же сервис.
UP. Хинт. Регистрируетесь на бесплатный аккаунт в tahometer.com, шлете письмо на info@tahometer.com с указанием своего логина и просьбой стать бета тестером и получаете комерческий аккаунт с офлайн временем и юзерами. Спасибо, softwareteam http://habrahabr.ru/qa/207/#answer_3150
С днём программиста.
Поздравляю коллег и тех, кому доводиться писать эти страшные строки заклинаний, чтобы картинка ожила. С днём программиста.
2 года
Вот так незаметно пролетело два года существования блога.
За это время произошло много и ничего. Блог вроде читают и иногда даже комментируют, так что всё хорошо. А за большой популярностью не гонюсь, пишу кое-как, когда придётся и на коленке. Очень хочется запустить свой облегчённый фреймворк, но пока не успеваю делать всё, очень надеюсь что времени будет больше.
Самое главное что случилось за это время — женитьба моей двоюродной сестрички, 28 августа Снежа сделала сей серьёзный шаг. Она, конечно, не прочитает сей пост, но всё же Поздравляю, желаю только белых полос в жизни.
Жизнь продолжается, движемся вперёд….
PHP для новичков
Уже устал читать вопросы: «что читать новичку?», «с чего начинать изучение php«. Поэтому постараюсь дать ответы на основании накопленного опыта.
Ответ номер раз — если Вы задаёте подобные вопросы на формах, то Вам следует сменить профессию. PHP это не самая оплачиваемая, не самая лёгкая и просто не самая профессия. Без умения пользоваться гуглом и прочими интернет проектами с кучей информации в программировании делать нечего.
Теперь нужно прочесть хотя бы одну книгу, я знаком с двумя неплохими вариантами — Котеров  и Олищук, так же известный под ником nw. И параллельно нужно осваивать http://phpfaq.ru/, где собраны очень полезные ответы для новичков, а многие вопросы ночикам даже не приходят в голову. Посещать форум http://phpclub.ru/talk/ так же обязательно, но на первых порах лучше молчать и больше читать. Старайтесь свои вопросы решать сами.
Для работы Вам понадобится связка LAMP или WAPM. Apache + MySql + PHP — это стандартный набор для веб разработчика на php, некоторые пытаются обходиться без веб сервера и использовать встроенные в IDE отладчики, но затем очень долго мучаются. Самый простой вариант поставить denwer или WampServer. Под линуксом всё значительно проще, когда есть apt. Я поклонник винды и нашёл очень удобный вариант — WmWare+Ubuntu server.
И забываем о блокнотах, нам нужен полноценный IDE, берём бесплатный NetBeans. Знакомимся с phpdoc.Дальше создаём проект и наслаждаемся автодополнением и прочими плюшками редактора.
Написали свою гостевую, поработали с базой, сессиями, куками, формами. Теперь пора расковырять фреймворк. Лучше начать с CI, он наиболее простой для начала. Затем переходим на Zend Framework, который лично для меня просто как тестовая площадка для ООП.
Есть ещё одна замечательная книга, которая переведёт Вас из разряда джуниоров в сериус — Шлосснейгл. Можно насоветовать ещё паттерны, но это уже следующий левел. С паттернами лучше знакомиться когда уже большинство из них используешь в разработке, а эти знания приходят из ковыряния чужого кода и чтения моего блога ;).
Главное организовать серьёзный фундамент и не спешить пригать через ступеньку, превращаясь в говнокодера.
Рабочее место программиста
В предыдущей статье вскользь упомянул об сервере убунте и подумал, что не мешало бы рассказать, как я вообще обустроился, чем пользуюсь для разработки.
Очень долго программировал дома на стареньком Duron с каплей оперативки и только недавно перешёл на новое железо — ноутбук тошиба. Очень удобно таскать всюду с собой, радуюсь, что взял всего 15.4 дюйма, но с windows 7 не хватает высоты. Если перетащить панель задач в право и сделать вертикальной, то не влазят все значки. Нужно выбраться и докупить монитор отдельно.
Ну а теперь, о наборе софта.Являюсь древним и закостенелым фанатом Windows ещё со времён 3.11 и пылаю праведным гневом на Мелениум, которая унёсла с собой мои курсовые. Пару лет периодически поглядывал на Debian, даже с пол года держал его основной системой, после чего попрощался навсегда с линуксами на декстопе. С ноутом досталась Windows Vista, которая была словно бальзам на душу, за всё время только одно нарекание — в первый же день мне удалось запороть раздел диска D:/ с помощью partitional magic. Теперь знаю, что их нельзя готовить вместе. не дождавшись выхода Windows 7 проапгрейдился до неё с помощью пиратки, а чуть позже узнал, что мне положен бесплатный ап от тошибы :(. рековери диск был убит ещё после partitional magic, вот и сижу как дурак, с лицензионным серийником, но на пиратке.
Следующее что нужно разработчику — это web сервер.  Здесь всё просто — WmWare + линукс. Кто не знает wmware palyer бесплатен, как и ubunta server (debian прости изменника). с помощью apt-get install поставил apache + php + mysql + phpmyadmin + redmine. Стучусь к нему с помощью putty, либо SSHSecureShellClient, который обладает удобным файловым менеджером, позволяющий закачивать файлы по ssh без лишнего гемороя.
Для написания кода однозначно IDE, коим является NetBeans, бесплатный и обладающий всему нужными функциями, особенно проекты по sftp и встроенный SVN клиент, поддержка xdebug. Хотя для SVN предпочитаю использовать TortoiseSVN. С проектом работаю по sftp, был плохой опыт с SAMBA, от которой отказался. Для быстрой правки на windows использую notepad++, на линуксе mceditor.
Ах, да, забыл про великий и могучий Total Commander с плагинами и прикладным софтом, включая упомянутый выше putty. Давно пора вернуть ему имя windows commander и поставлять вместе с ОС.
Браузеры Opera (для сёрфинга, но всё реже), Chrome (сёрфинг и плагины, а главное gears, из-за чего не забросил Opera), FireFox (только для отладки Firebug, WebDeveloper), IE8 (иногда для отладки вместо FF, нравится гораздо больше). Кстати, для firefox советую запускать его с параметром -p и завести парочку профилей, отдельно для работы, отдельно для сёрфинга.
Из остального CamStudio (для захвата видио и демонстраций заказчику), HeidiSQL (для работы с MySQL), Araxis Merge (сравнение и мержинг файлов и директорий), Axure (для прототипирования, хотя лучше веб сервисы), PuntoSwitcher (в режиме Off, меняет раскладку в последнем набранном слове, либо выделенном тексте).
Наверняка что-то пропустил, спрашивайте. дополняйте.
Красивый var_dump с xdebug
Как всякий порядочный программист я пользуюсь отладчиком под PHP, коим является Xdebug. Но сейчас речь пойдёт не об отладке, а о «сахаре», который идёт в комплекте с xdebug. Очень удобным является красивое и более информативное оформление вывода ошибок и var_dump(). Но на моей ubunta server 10.04 вывод xdebug стал не нормальным, без оформления и раскраски. Я долго грешил на сам xdebug, комался в настройках, но всё оказалось проще: идём в /etc/php5/apache2/php.ini и ищем строку html_errors=Off, меняем её на html_errors=On, рестарт апача и благодать снова снизошла на нас.
Класс запроса — Request
В прошлый раз мы составляли список хотелок и среди них было ЧПУ. О человекопонятных урлах я так же начинал писать чуть ранее и приводил пример своего видения .htaccess правила для mod_rewrite, сейчас повтору его с некоторой поправкой связанной с моим просвящением в области SEO.
RewriteEngine on
RewriteRule !^(p/|favicon\.ico|robots\.txt|sitemap\.xml|sitemap\.xml\.tgz) index.php [L]
Теперь мы будем перенаправлять на index.php всё, кроме запросов в папку p(публичную), и на файлы favicon.ico, robots.txt, sitemap.xml. Теперь мы стали более дружественными к поисковикам и брат seoшник не будет нас проклинать.

Покончив с нелюбимыми настройками сервака переходим к хотелкам по классу запроса.
В начале разберёмся с типизацией, для этого создатим простенький класс с константами, чтобы не забыть допустимые типы.
Как видим, здесь только константы и статические классы, которые приводят к нужному типу. Методы вызываются по правилу Type::to<имя_константы>(<переменная>), например, для Type::T_INTEGER = ‘integer’ вызывается метод Type::toInteger($value) , который возвращает переменную приведённую к целому.
Теперь создаём класс Request, он будет вызываться cпомощью паттерна одиночка, это не обязательно и является дурацкой привычкой, к тому же если перейти к компонентному стилю, то очень удобно использовать гремучую смесь одиночки и реестра. Ну и у него должны быть методы getController, getAction, get — для получения параметров из строки запроса, метода isAjax — для определения AJAX  запросов.
Как работать с классом… Немножко поясню по методу get, в него можно передавать 3 параметра: ключ для параметра из строки запроса, дефолтное значение, тип.
Ключ может быть 0 или 1, для контроллера и экшина, а дальше либо по позиции, либо по хэш значению. /controller/action/param_2/name:value/
Дефолтное значение — это значение, которое будет присвоено если в строке запроса нет такого ключа. Есть маленький финт с передачей вместо значения исключения унаследованного от Exception, например, при удалении статьи необходим параметр id, если его нет то нужно выдать 404 страницу с сообщением, что параметр отсутствует. делается это так: $request->get(‘id’, new Exception(‘Нет необходимого параметра id’), Type::T_INTEGER); Кроме сообщения об ошибке, здесь ещё приводится значения к типу integer.
Для AJAX запросов мы проверяем переменную ajax, которая может передаваться в урле и имеет наибольший вес, затем проверяем заголовки, которые посылаются при ajax запросах.
Больше ничего размусоливать не хочется, времени последнее время катастрофически не хватает. Лето как никак, нужно отдыхать, чего и Вам желаю. Если есть вопросы — Welcom.
Привет типизация
Совсем недавно писал о типизации и как в воду смотрел, ай да я молодец. Не прошло и недели, как впечатлённые моими размышлениями бредом разработчики решились таки включить годовалый патч .
Очень рад, что разработчики php core учатся договариватьсяи включать патчи друг друга. В декабре прошлого года засветилась надежда, что включат php-fmp, его включили в svn. Но, по недавней информации в версии 5.3.3 его ждать не стоит. Надеюсь, что Андрей Нигматулин и Антон Довгаль уговорят всё же остальных.
Типизация в php
Многие, наверное уже и не помнят какие холивары возникали по поводу недоООПешности php. Зачастую спорщики просто не знали о возможностях языка, другие судили по версии 3-4. Но вот уже появились нэймспэйсы, замыкания, лямбда функции кое как сделанные. Ещё одной проблемой виделась отсутствие строгой типизации. Особого смысла я в ней не вижу и, как показала практика, у не строго типизированных языков в вебе преимущества. Но всё же поговорим об этом. Самая большая проблема — то, что всё что нам приходит от пользователя представлено в протоколе http и в php сводится к строкам. Вводя в инпут строку html не даёт возможности сказать что в этом инпуте будет число, а в этом строка. Как вариант на этапе разгребания заголовков указать тип. Но удобства от этого не много, проще перевести к типу там, где это требуется, например (int)$_GET[‘var’] или intval($_GET[‘var’]).
Зачем же нам знать типы. Типизация позволит избегать неявных проблем с приведением типа, когда это не нужно, типизация позволит не заморачиваться обработкой ситуаций в коде, когда нам вместо интегера передали строку и не городить кучу ифов и бороться с помощью  паттернов типа Special Case, усложняя код. Хочется чтобы язык сам предотвращал такие evil-ситуации.
Очень хорошим шагом был ввод тайпхинтинга, позволяющий проверять тип объекта, переданный в функцию. function test(Mytype $var, TypeInt $varInt, array $varArray). К сожалению,  он работает только для объектов и массивов. Мне удалось нарыть информацию о патче, позволяющем осуществлять хинтинг других типов, таких как integer, string…. Счастье совсем рядом и мы сможем делать такие вкусности.
Указание типов входных и возвращаемых данных может быть очень и очень полезным для не совсем веб ориентированных приложений типа ERP и CRM систем на php.
Кроме это в pecl есть расширение SplTypes, которое позволяет при создании задавать класс переменной, а затем при изменении на неверный тип выбрасывает исключение
Так что, формально и теоретически более строгая типизация в php может появиться, другое дело — насколько это поможет ﻿и будет полезным ли. Время покажет.
Забираем почту с tut на gmail
Надеюсь всем известна о возможностях gmail и таком замечательном, как забирание почты с других ящиков. В своё время я настроил подобный фокус для ящика на tut.by. И жил не тужил. В январе этого года менял работу и давал объявление на сервисе белорусского портала. Долго удивлялся, что кроме одного звонка больше никто не отписывался. И вот недавно, случайно обнаружил в чём причина. Почта то не забиралась.
Тут бай, который изначально разрабатывался как почтовик постепенно забил на это дело, но ящики то остались. Были у них и проблемы из-за фокусов нашего государства, которое заставляло держать серваки у нас в стране, в то время как московские обходились бы в сотни раз дешевле (где-то видел цифру 200). Ну и недавно удалось разрубить гордиев узел и перенести почту на gmail. И моя отработанная схема перестала работать.
Проблема решается довольно легко. Заходим в «аккаунты и импорт» гмыла, и находим наш горе ящик. УжОс, там чётко видно, что почта не забиралась уже несколько месяцев. Меняем настройки. Имя пользователя нужно указывать с @tut.by, например, user@tut.by. Пароль — ваш (интересно, как удалось их сохранить, неуж то хранились на туте в открытом виде). POP-сервер записываем smtp.gmail.com с портом 995. Выставляем галочку напротив SSL, а то наше государство последнее время лютует и в интернете.
Сохраняем и наслаждаемся.
p.s. Надеюсь все в курсе последнего глюка правительства В Беларуси объявлена госрегистрация абсолютно всех интернет-ресурсов. Так что бежите, регистрируйтесь, пока Вас не назвали врагом народа. А на выборах известно за кого не нужно голосовать.
Пишем свой велосипед: часть 0
Довольно часто приходится сталкиваться с велосипедостроительством в php. Язык к этому располагает, нет чёткого лидера среди фреймворков, да и те что есть довольно неудобные и громоздкие. И вот на просторы оупенсурса выливаются реки говнакода непонятно для чего написанные и куда должно оно течь.
Я поставил себе цель научить других, как планировать и выстраивать видение конечного продукта. Это поможет не только в велосипедостроении, но и в небольших проектах. Надеюсь, всё получится.Первый пункт начинается с убийцы ms project (Ялошенька, прости, но не могу не поделиться этой корпаротивной тайной с сообществом). Итак, находим лист, желательно чистой бумаги, салфетка или рулон туалетной бумаги тоже подойдёт. Теперь на нём нужно написать план действий и желательно подробнее, чем классическое «хочу чтобы картинка ожила».
Например, мы пишем убийцу Битрикса и Zend Frameworka в одном лице. Составим список хотелок:
А теперь настраиваем виртуальные хосты Apache, заводим проект в системе контроля версий svn или mercurial, ставим тикет систему типа redmine, и начинаем кодить, рефакторить, кодить и так до бесконечности.
Самое важное иногда показывать код другим программистам, чтобы не зайти в тупик. Ещё бы хорошо иметь под боком кого-то не разбирающегося в программировании и попытаться ему объяснять как будет работать система, если он поймёт хотя бы часть, то путь выбран правильный.
В ближайшее время выложу свои наработки, сделанные по данной схеме и продолжу уже рассказ с учётом кода.
Ищем сотрудника.
В наш дружный коллектив срочно требуется ещё один php программист хотя бы с минимальным опытом за спиной. В первую очередь ему придётся разобраться с внутренней CMS и заниматься доработкой сайтов созданных на ней. Работка довольно «весёлая», так как история ведётся с начала 2000-х и поднакопилось довольно много проектов и разных версий CMS. Разработки новых будет по минимуму, т.к. сейчас всё делаем в основном для себя. Очень желателен хороший скил в вёрстке и jQuery, ну и опыт php в реальных проекта,  если нужно, подтянем, но база обязательна.
А когда победим старое наследие, ждёт светлое будущее, приятный фреймворк и интересные проекты из области СЕО и для внутрикорпоративных нужд.
Компания известная, стабильная, коллектив прекрасный, коллеги лучшие из лучших ;).
Conversion, software version 7.0
Немного лирики.
Как и обещал занялся написанием пары топиков по оптимизации работы. Честно говоря серия должна была начаться отнюдь не с данной статьи, но так получилось что именно этот топик станет первым. Надеюсь у читателей есть представление о том, что такое SVN, если нет то лучше прочитать эту статью немного позже, так как немного позже будет опубликована статья под названием «Оптимизация работы или что нужно программистам для плодотворной работы» **(название взято из головы для раскрытия сути) в которой будет опубликовано мое мнение по тому, как оптимизировать работу работников небольшой компании которая только открылась. Ладно опустим лирику перейдем к теме топика.
Вам что-нибудь говорит название статьи? Нет это не относится к песне группы System Of A Down — Toxicity и сегодня мы будем говорить не об песнях, а о том зачем и что такое верисии(в дальнейшем тэги) и каким образом они относятся к оптимизации работы.
То с чего следовало начать.

Сразу хочу заметить к написанию данной статьи меня сподвигло то, что я встречал некоторые небольшие конторы которые занимаются довольно крупными интернет проектами, но на создание версий продукта они грубо говоря забивают. Прежде чем говорить «как лучше» давайте разберемся зачем все это:
Из написанного выше можно сделать вывод, что версия проекта это более менее стабильная копия проекта с закрытыми багами или с новыми «фичами». Версия проекта это обычно трех значное число разделенное точками например 3.1.2. Первая цифра изменяется при внесении в код больших изменений затрагивающих структуру проекта, вторая меняться при введении менее крупных изменения, но которые все же существенны и третья цифра меняется при закрытии багов или внесении правок. Обычно последняя цифра меняется при закрытии 10-15 багов **(так при использовании систем контроля версий мы всегда сможем узнать в каком тэге был закрыт баг).
Такое бывает?
Итак у нас уже во всю используется Subversion, но все выглядит примерно так: один сотрудник меняет код, потом в лучшем случае кто-то тестит и потом правки выкидываются на продакшн или просто делается update. Хочу заметить, что данная схема довольно опасна, тем что если были сделаны правки и появились новые баги мы не сможем безболезненно откатится назад, скорее всего будет тратится время на то, что-бы новые баги исправить, а в это время проект будет лежать, чего мы ну не как не хотим.
Как быть???
Итак смотрим какие существуют общепринятые «правила хорошего тона» для структуры директорий в файловой системе хранилища. В простейшем случае в корневой директории файловой системы имеются как минимум три директории:
Директория trunk содержит «рабочую» версию проекта в которой и ведется вся разработка, branches содержит ветви проекта **(можно сказать, что тут создаются временные ветви которые перетекают потом в основную ветвь), tags содержит все метки. Такая структура удобна для хранилища, содержащего только один проект. Если проектов несколько, то более удобна следующая структура:
то есть в корневой директории находятся директории проектов, и в каждом из них есть свои trunk, branches, tags, относящиеся только к этому проекту.  Хотя это все не является догмой и это все можно организовать как угодно **(только без лишнего фанатизма:)
Так вот нам в нашем случае нам интересны ветви trunk и branches, собственно мы и будем создавать тэги в branches из рабочей ветви trunk с помощью команды copy которую разработчики Subversion добавили в функционал svn. Синтаксис выглядит так:
В результате мы получаем работающие копии проекта, которые мы можем выставить в качестве релиза.
Ха где гибкость?
Для того, чтобы все работало «как надо» следует перенастроить apache так что-бы DocumentRoot вел на симлинк, а последний в свою очередь на копию из ветки tags.
Например:
DocumentRoot /var/www/site.my/release/
release -> /var/www/site.my/1.0.1
Получается что бы заменить старую версию 1.0.1 на более новую 1.0.2 нужно всего то выполнить команду checkout и подменить симлинк
Вуаля у нас уже версия 1.0.2 и никакой остановки работы сервера:) И тут как назло узнаем, что в результате наших правок не работает супер-пупер функция делающая кучу плюшек для клиента мы быстренько меняем симлинк на старую версию и не спеша калупаем код не думая о том, что сейчас лежит сайт и клиенты уходят к конкурентам 🙂 Со временем можно удалять старые ветки когда вы будете уверены в том, что в новой версии все стабильно.
Много действий? 🙁
Как вариант можно сделать скрипт который будет делать выше описанные действия автоматически:) Привожу как пример bash скрипт который умеет создавать теги, делать чекаут, и менять симлинки








echo «Project installer version 0.0.7»
echo «Выберите пункт меню:»
OPTIONS=»Install Tags Change_release Quit»
select opt in $OPTIONS; do
if [ «$opt» = «Quit» ]; then
exit 1
elif [ «$opt» = «Install» ]; then
InstallFun
elif [ «$opt» = «Tags» ]; then


TagsFun
elif [ «$opt» = «Change_release» ]; then


Change_releaseFun
else
echo «bad option»
fi
echo «»
done
На самом деле для своих целей использую ant в котором автоматически меняются конфиги, создаются нужные директории,  устанавливаются права и тп. Даже не потому, что нельзя повторить на bush, а потому, что так повелось:) и некоторые вещи делаются немного удобнее там.
Кто тут? ЧТо тут происходит??
Ну вот вроде изложил то, что хотел… Хочу заметить, что данную статью не следует расценивать как призыв к тому, как нужно жить, эта статья о том как можно было бы сделать если этого уже не сделано или не найден вариант лучше.
Хватит нас позорить
Многие успели посмотреть сериал «Теория большого взрыва» в котором рассказывается о жизни о четырёх друзьях-учёных, который не повезло жить по соседству с прекрасной, но не шибко умной блондинкой-официанткой. Все наслаждались, смотрели, но не тут то было. На сцену вылезли наши кинорижесёры, которые решили содрать идею и сделать его на белорусский манер.
К сожалению, слова «Сделано в Беларуси» уже давно вызывают позывы ко рвоте. Есть парочка достойных продуктов, но их очень мало, а кино уж точно не входит в данный круг. Многие с ужасом вспоминают про клонирование «Наша Раша», да упокоятся души не выдержавших просмотра сего безобразия. И вот враги государства, решили своровать идею у тупых американцев. Название «Теория большого взрыва», заменили на более привычное и не отпугивающее наших умов с двумя и более высшими образованиями — «Теоретики».
Ну и получилось в лучших традициях современной белорусской науки творения уровня не хуже достижения наших «теоретиков». Да ладно ещё о позоре, люди разбегались виде сего безобразия. Но, но, но….. Слухи дошли до Чак Лорре, который высказал что об этом думает, вылив ведро несправедливых помоев на страну. Теперь мы кроме того, что пираты, так ещё и выращиваем скот годный только для одёжных щёток. Спасибо Вам, наши режисёрыща, Вы сумели втоптать страну ещё ниже, в этом году у вас есть шанс обойти наших теоретиков с интеграла с их наклейками.
Самое обидное, что в этом поучаствовали ребята из прекрасной команды ЧП, которая славилась своим качественным юмором в КВН. Зачем было лезть в воровство, когда сами могли придумать не хуже.
Письмо можно посмотреть здесь.
И главное, что им за это ничего не будет, а то и премию дадут.
Так как никаких других возможностей у меня нет, я надеюсь, что это письмо прочитают те милые люди, которые делают «Теоретиков», и что они, страдая от угрызений совести, отправят нам партию фетровых шляп.
Пример использования ArrayAccess
Мне недавно в блоге задали вопрос о применении ArrayAccess. Просто как замену массивам — глупо, тем более теряется производительность. Итак, для этого у нас две основные причины — set/get должны как-то влиять на значение переменных, вторая — объект может использовать данные помещённые в нём для других методов.
Рассмотрим примеры. У нас есть класс для работы с таблице из базы данных как с объектом.
Что бы сделали?
Изменили наш сэттер, теперь присвоенное значение можно смело вставлять в базу данных, не боясь sql injection. (это скорее силиконовый пример).
$user = new User();
$user[‘login’] = ‘test » evil code’;
$user->save();
Изменили геттер, чтобы данные можно было вставлять в шаблон, не боясь xss и проблем с поехавшей вёрсткой.
$user = new User(666);  //login -> <script>alert(‘HELP ME’);</script>
<p><?=$user[‘login’]?></p>
При этом с помощью специального опасного метода $user->getHtml(‘login’) мы имеем возможно вставлять и html код, но уже не позабыв об экранировании, а злонамеренно, чтобы навредить надоедливому заказчику :).
Ну и добавили новый метод, позволяющий получить сразу имя и фамилию $user->getFio().
Я сменил работу.
В середине декабря 2009 года, после разговора с директором было решено, что нужно менять работу. До этого я работал на пол ставки и меня это устраивало, т.к. было много времени для самообразования, которым я активно занимался. В прошлой компании был замечательный коллектив, адекватный руководитель, но проекты и менеджмент сильно напрягали, да и денег после перезда в более дорогую квартиру стало хватать в притык. Вот так, под бой курантов я попрощался и с работой.
Но начали праздники, какой идиот столько их насовал подрят. Решил в это время довертеть свой фреймворк и проект на нём до стадии продакшена, а заодно пописать в блог. Составил резюме в док формате, не поленился даже иконок навставлять и фото. В резюме не было ни обного проекта, просто знания, опыт, где работал и ссылка на блог, плюс на форум phpclub,  прицепил кусочек кода. Всё это дело отослал 14-го числа после обеда в шесть мест. Стал ждать.
В четверг мне так и не позвонили, к одинадцати пятницы я уже даже высказался по поводу звонков, но буквально через десять минут раздался звонок, номер оказался знакомым. Как-то летом белорусы из phpclub решили попить пивка совместно, но не срослось, но номерами обменялись. Как раз один из них и позвонил, так что я даже не подумал о работе. Но, оказалось, что я послал ему резюме. В обед мы встретились, обговорили детали и я поехал в другой офис оформляться. Об условиях даже не задумывался, они были хорошими, но главное — коллегу я очень уважал ещё по форуму, а возможность подтянуться лучше любой зарплаты, соцпакетов и кофеварки. Вернувшись домой, обноружил одно письмо с ответом (автоответчики не в счёт), в нём были вопросы, меня почему-то приняли за фрилансера и сомневались, что я могу всерьёз и на долго. Отписался, ответил на вопросы и предупредил, что я уже трудоустроен.
В понедельник, был уже на работе, а остальные hr-мэнеджеры начали отзваниваться только под вечер. Девушка из  I******* явно огорчилась, что я уже соскочил, переспросила: «Вы же в четверг прислали резюме». Во вторник отзвонились по 4-му резюме из C******, у девушки был просто потрясающий голос, а в их компанию я как раз и собирался пристроиться, т.к. друзья её очень расхваливали. Но а те, кто звонили уже в среду, через 3-4 рабочих дня это уже извиняюсь не hr, а писец.
Собственно ради этого и начал писать большую статью. Недавно основатель тут.бай высказывался по поводу недостатка программистов на рынке, которые к тому же в данной ситуации катаются как блины в масле, забив на образование и предпочитающие беспокоиться о мягком кресле и кофеварке в офисе. Я самолюбив, самоуверен и знаю себе цену. Будучи не программистом, без высшего образования, попав в php случайно, но всё же легко дорос до уровня значительно 😉 выше среднего. Так что ожидал, что будут отвечать активнее. Но хедхантинг и борьба за специалистов — это не для Белоруссии, у нас сливная труба из университетов ежегодно выбрасывает на рынок огромное количество (сново два «л» написал 🙁 ) инженеров-«программистов». Из планктона даже пятая часть не может написать что-то вразумительное и идут в эникейщиков и «сильных» программистов, чьи стальные мускулы пригодятся при таскании убитых системников на склад. Ведь в госучреждениях настоящие программисты никому не нужны и им приходится втихаря кодить for fun. Государство убило образование, убило рынок специалистов: диплом ничего не значит, сертификация только в крупных забугорных компаниях. А наши конторы тыкаю пальцем в небо при подборе кадров. Вот чем ценны блоги и форумы, в них можно выделиться из серой, неизвестной среды и о твоих знаниях будут судить по твоим текстам, а не по регалиям в резюме, которые зачастую ещё и придумывают. Самое забавное, что при распределении студентов, представители компаний, подавших заявки, зачастую даже не удосужатся познакомиться с тем, кто будет трудиться на их благо следующих два года и более. Так что вина не только в образовании, но и в требованиях. Когда руководству нужен программист, чтобы пиратский ключик для каксперского ставить умел, а не для автоматизации — это ужасно, для этого не нужно пять лет учиться, максимум годик в ПТУ. Но ПТУ и техникумы у нас дискредитированы в сознании населения, все хотят ВО, чтобы затем вкалывать на заводе за зарплату в два раза ниже сантехника. Так что виновато и население, которое не уважает простых трудяг, которые не смотря на необразованность зачастую лучше задрота с вышкой и аспирантурой за спиной и нищенской сульбой впереди.
Сопли закончились, теперь о новой работе. После недели труда — всё замечательно. Коллектив отзывчивый и профессиональный, руководство заботливое и знающее что нужно и не допекающее по пустякам, работа под боком, кофе — ещё не пробовал. Специфика правда сеошноая, что не привычно, но интересно, как раз то, чем я заинтересовался в последнее время. Только очень сложно работать 8-мь часов после 20 часов в неделю, когда трудился максимум 6 часов за раз. А на работу к 9-ти часам я никогда не ходил в бытность программистом, вот и сплю по 5-6 часов. Усталость накопилась, а в субботу ещё и рабочий попался.
С hr у нас проблемы, с образованием тоже, зато я хотя и уставший, но дико довольный. Хорошо, когда всё лучше, чем ожидал.
Моя реализация ЧПУ
Нашёл на одном из блогов реализацию ЧПУ и решил внести свою лепту. ЧПУ — человеко понятный урл. На аглийском наиболее популярное название User Friendly URL. С какого-то перепугу разработчики решили, что стандартный урл с гет переменными непонятен и покатилось. Сначала сравним варианты для вывода списка новостей категории test отсортированного по date:
news.php?category=test&sort=date — стандартный подход, вроде всё понятно ключ=значение
news/category/test/sort/date/ — если убрать выделение, то не понятно где ключ, а где значение
news/test/date/ кратко, но довольно путано, обязательный порадок, трудно изменять
news/category:test/sort:date/ — этот вариант хорош, так же нагляден как класика и даже чуть короче
news.test.date — краткий, но не информативный, есть один плюс — такие страницы без тайтла сохраняются с нормальным названием.
Теперь рассмотрим классический разбор: через mod_rewrite apache пересылаем запрос на index.php, а там уже разбираем с помощью php. Разбор в самом mode_rewrite не очень хорошая идея, так как постоянно нужно модифицировать .htaccess. Самое популярное правило:
.htaccess ложится в корень сайта и прописывается (код из wordpress)
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteBase /
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
Сразу проверка есть ли модуль, а дальше если нет файла или директории с указаным адрессом, то пересылаем на index.php, а там разбираем $_SERVER[«REQUEST_URI»]. У правила есть один огромный недостаток — разработчики постоянно забывают, что браузер запрашивает кроме страницы favicon.ico — для маленькой иконки в названии сайта. И если такого файла нету, то на index.php посылается и этот запрос, тем самым нагрузка удваивается. Вторая проблема — создал папку с названием модуля и всё, накрылся реврайт.
Я учёл эти проблемы и запихнул всё что должно быть доступно из вне в папку public, а затем для неё и favicon.ico отключил реврайт.
RewriteEngine on
RewriteRule !^(public/|favicon\.ico) index.php [L]
Ну а дальше по отработанной схеме. Из недостатков — ограничение на название public. Из плюсов — теперь только в публик можно не придерживаться ЧПУ фреймворка, например, tinymce в папке public может использовать урлы с гет переменными, а если перенести за пределы, то всё будет работать через единую точку входа.
Работа с формами
Когда новички спрашивают что бы им написать посерьёзнее, обычно советуют гостевую книгу. Вариант хороший, в нём много разных путей реализации, можно повесить авторизацию, работу с деревьями, но самое главное — формы. Самое удивительное, что я встречал огромное количество (количество пишется с одним «л», когда уже избавлюсь от этой ошибки) «профессионалов», которые так и не научились делать удобные формы. Совет заказчикам при оценке партфолио всегда проверяйте форму обратной связи или регистрации-авторизации.
Жизнь формы:
Приступим.
Набросаем класс формы. Он должен уметь:
Вот что у меня получилось
После обновления wordpress до 2.9.1 что-то случилось, вставка кода испортилась, tinymce кучу дополнительного кода генерит, прям в лучшем стиле ms word.
Теперь необходимо сорудить непосредственно обработчик
Сперва отправили заголовок, чтобы не было проблем с кодировкой, затем подключили класс. Внимание это делается с помощью require_once, _once говорит, что подключаем файл только один раз, а require гарантирует, что в случае ошибки код не продолжится выполняться и не вылезет ещё десяток ошибок, как при include. Далее создали объект формы с именем form, проверили была ли отправлена данная форма. Если нет, то устанавливаем значение по умолчанию и выводим шаблон формы (include, так как не влечёт за собой других ошибок).
Если же форма была отправлена, то делаем проверку на заполнение поля, выставляем текст ошибки. если же не было ошибок !$form->isInvalid(), то сохраняем или что там и редиректим на thank.php.
Теперь рассмотрим сам шаблон
У формы метод post, get-ом я никогда не пользуюсь, action пуст, он отправит нас на ту же страницу, что нам и нужно, т.к. за вывод и обработку отвечает один скрипт. Имя формы берём из объекта формы. Имя полей тоже по принципу имя_формы[имя_поля], а value опять же из объекта, при этом у нас используется экранирование. После поля выводим сообщение об ошибке, если оно есть <?=$form->isInvalid(‘text2’)?>. И всё, легко и просто, а главное — эффективно.
Архив с кодом можно скачать здесь
Смешиваем singleton и registry
Основное достоинство Одиночки одновременно является и его недостатком. Допустим у нас есть класс для работы с базой данных реализованный на singleton (о ужОс, нужно было хотя бы фабрику). Всё замечательно работает, пока в один непогожий день мы не придумываем держать данные в разных базах на разных серверах. Ну и этого геморроя нам мало, поэтому от возможностей мускула мы отказываемся. И приплыли… Соединение у нас то ОДНО. Отказываться от singleton и перелопачивать тонны кода тоже не с руки, значим поставим костыль.Можно было бы использовать registry, но опять же куча правок и смена Db::getInstance() на Regisrty::get(‘db0’) Regisrty::get(‘db1’). От этой мысли мы возьмём на заметку способ доступа по ключу Db::getInstance(‘db0’) Db::getInstance(‘db1’).
Для этого сделаем $instance массивом, а чтобы не хранить в памяти ключи и не переписывать код Db::getInstance() будем хранить последнее значение в статической переменной $cursor
В итоге мы получим нечто этакое
Создали одну копию у неё индекс «0», при повторном вызове без параметра получаем всё тот же singleton, а когда передали индекс «1», то создался ещё один экземпляр класс Foo, последующие вызовы уже будут работать с ним, пока не переключимся на версию «0» Foo::getInstance(0).
Как бы всё, можете писать свой хайлод или модифицировать старый код.
Паттерн: Singleton
Продолжая тему паттернов бегло расскажу что это за зверь singleton. На русский язык он переводится как «одиночка», относится к порождающим паттернам и позволяет нам плодить объекты, вернее всего один. Singleton гарантирует, что будет создан только один экземпляр класса. Для этого конструктор делается приватным и создаётся статический метод, который проверяет создан ли уже объект и возвращает нам этот объект.
Сразу мы вызвали статический метод и у нас создался объект, при этом сработал конструктор и вывелось сообщение. Во второй раз уже не создавался объект и сообщение не появилось. А вот создать $o3 не получится, так как конструктор закрыт, точно так же и с клонированием объекта.
Хотелось бы сказать, что многие относят Singleton к антипаттернам, т.к. он позволяет беззаботно  передавать объект между классами и делать это не явно, тем самым портит архитектуру. То же самое относится и к Registry (Реестру) и в этом они похожи.
Я иногда смешиваю Singleton и Registry, помещая во внутрь одиночки реестр, тем самым заполучаю возможность создавать только один объект с заданными параметрами или же добиваюсь лёгкого переключения объектов. Таким методом у меня построен Request в котором хранятся данные о запросе разделённые для разных урлов, что очень важно при компонентном подходе.
Обустраиваем Zend Studio
В Zend Strudio 7 нет парочки очень нужных вещей для php разработчика. Сперва прикрутим поддержку самого популярного шаблонизатора — Smarty. Затем добавим поддержку так же очень популярного формата yaml, который для меня похоронил xml конфиги.Плагин можно найти на гуглкоде, вот здесь. Скачиваем его, запускаем студию переходим в пункт Help -> Install new software . Вместо адреса сайта выбираем кнопку «архив» и указываем путь к скачанному архиву. По умолчанию установлено отображение по группам, но убрав его можно лицезреть наш чутный плагин. Выбрали его, докачалось что нужно, перегрузили студию. У меня на Zend Studio7.1 понадобилось ешё для проекта в конфигурации указать поддержку smarty. Так как у меня достаточно много плагинов, то я пользуюсь шаблонами кода template, их можно добавлять в настройках студии, там будет ветка Smarty.
Для yaml нашёл два плагина, вроде оба одинаковы и обладают страшным недостатком — не поддерживают шаблонов. Решил поставить yedit. При установке указываем урл http://dadacoalition.org/yedit/ и вперёд, перегружаться не обязательно.
И ещё одна плюшка — поддержка xdebug. В Zend Studio 7.1 он у меня подхватился вроде с предыдущей версии, а в 7.1 нужно было убрать из папки плагинов два плагина com.zend.php.debug.* после чего появилась возможность сменить Zend Debuger на XDebug.
Пока всё, что хотел рассказать и что вспомнил. Если кто-то знает как всунуть поддержку шаблонов в yml, буду очень рад.
Беларуский сайт для фрилансеров.
Недавно открылся сайт free-lance.by, посвящённый беларуским фрилансерам. Это не аналог российской версии, а скорее место общения белорусского фриланс комьюнити. Общайтесь, задавайте вопросы, отвечате на них, обменивайтесь опытом.По сравнению с российскими коллегами у нас нет действительно хороших ресурсов по данной тематике. Я встречал подобные, но этот мне ближе, так как его основатели мои знакомые, люди с которыми мы трудились плечо к плечу. Хочется верить, что здесь будут собираться настоящие фрилансеры, понюхавшие пороху в этом нелёгком деле.
Так же этот ресурс будет интересен новичкам, так как можно получить совет от матёрых специалистов.
Возможно, пользу получат и заказчики, которые смогут прицениться и заказать проект у нас. (Покупайте беларуское ;))
Счастливого плавания.
Обновился Netbeans
Обновился IDE до версии Netbeans 6.8. Из особенностей, важных для PHP — поддержка PHP 5.3 и поддержка замечательного фреймворка   Symphony. А так же на сладкое — подсветка php в YAML. Многие не знают, но с помощью плагина легко добавляется подсветка и автокомплит smarty, покопайтесь в плагинах.
Переезд
Придётся снова перехать, vps меня совсем не устраивает, продешевили мы. Скупой платит дважды.
up.
Всё перенёс, работает значительно шустрее. Перезд удался, ещё посмотрю, и можно продлевать хостинг ещё на парочку месяцев.
Автоматическое обновление плагинов WordPress
Наверняка, многие столкнулись с проблемой при обновлении плагинов в WordPress 2.8. Способ автоматического обновления, когда было необходимо лишь указать логин-пароль для ftp сейчас не проходит. Выдаётся ошибка: «Не удалось определить директорию содержимого WordPress (wp-content)».
Лечится это довольно просто, решения нашёл в буржнете. В wp-config.php к конец дописываем код.
После этого у меня всё заработало, надеюсь поможет и Вам.
Вконтакт сломан, сново
В очередной раз выложен вайлик с мэйлами и паролями для vkontakte.ru вот сслыка на файл с логинами. Ищите свой и не забудьте сменить пароль. Причина как всегда — нефик качать что попало.
На хаьре один из пользователь подсчитал:
Всего 11.258
mail.ru + list.ru + bk.ru + inbox.ru = 5959 + 249 + 323 + 259 = 6790 (60 %)
yandex — 2281 (20%)
rambler — 1009 (9%)
tut.by — 239 (2%)
ukr.net — 160 (1.4%)
gmail.com — 124 (1.1%)
Малый процент пользователей gmail яркий пример тому, что вменяемые пользователи в основном пользуются почтой от гугла, а вот поклонники майл ру  плохо разбираются в  правилах безопасности использования интернета. И не надейтесь на антивирусы, самая лучшая защита — голова на плечах.
Блог сново оживёт
К сожалению, из-за форс мажора очень долго не доходили руки до поднятия блога на VPS. Но таки я сделал это и буду дальше замусоровать интернет своей писаниной.
О ближайших планах:
1. Статьи о паттернах, будут, но позже.
2. Чуть-чуть пооупенсуршу выложу скрипт чата на php и класс для работы с MySql, который недавно взялся писать.
3. Прицепить дизайн и до оформить блог.
Отчёт о конференции «Байнет 2.3 Gamma»
Свершилось. С 14-го по 15-е мая 2009 года на просторах нашей страны случилась конференция посвящённая вэбу. Я решил пойти туда не только послушать, но и себя показать :(, но обо всём по порядку.
Первый день — технический. Встал пораньше, что при моей привычке просыпаться в 11-12 было подвигом, а тем более меня накануне свалила простуда. Пришёл на регистрации, убедился что наши девушки самые красивые в мире, зарегистрировался, уселся и стал слушать первый доклад.
Николай Мациевский рассказывал о клиентской оптимизации, тему для меня давно знакомая и не раз перечитанная, но в работе руки до этого не доходят. Как по мне оптимизация спичечная — до первой загрузки, а когда уже всё лежит в кэше браузера, то плевать откуда и в сколько потоков грузились файлы и технология спрайтов, упаковок становится бессмысленной и возможно даже вредит. Но доклад понравился.
Затем два доклада на схожие решения от майкрософт — Silverlight и адоб — Flex. Silverlight пока явно второй, но здоровая конкуренция только на пользу. С flex я поверхностно знаком, ничего нового, но было интересно слушать англоязычного докладчика и переводчика, второго особенно т.к. свои пробелы в техническом слэнге он компенсировал весёлой отсебятиной. В перерыве пообщался с Шатохиным из m$, узнал много чего интересного: Silverlight использует свой бинарный формат для передачи, а не xml, что похоронило для меня технологию, плюс благодаря ему зарегистрировался в твиттере.
К обеду у меня уже был упадок сил и насморк достал. Но после обеда выступал соотечественник и рассказывал о AJAX. Изначально Дмитрий Бобров дал понять, что времени мало чтобы рассказать всё что задумал и не зря — информации было ноль, кроме забавной и бессмысленной попытки сравнивать XML и JSON. Все недостатки громоздкого и неповоротливого XML компенсируются XSLT трансформацией на стороне клиента. Затем была презентация CMS их студии построенной на AJAX, было интересно, особенно заинтересовало решение с wysiwyg редактором загружающимся единожды, а далее в нём подменивают  контент. Задал волнующий меня вопрос о том, стоит ли так париться и использовать javascript там, где место flash.
Потом наступила моя очередь. Это было страшно: по спине побежали мурашки, адреналина столько, что даже насморк пропал, во рту словно комок, мысли разбегаются и хотелось самому убежать. Сбивался, забывал о чём собственно планировал рассказать, голос дрожал, я даже не шутил о_О. В общем, первый блин  получился комом, даже комищем. Простите все, кому пришлось это терпеть, даже мне было скучно, хотя тема ORM и Doctrine очень достойная. Сделал ряд выводов и чуть позже напишу о них, чтобы другие не набивали шишек. Мне задали лишь один вопрос — зачем ORM? К этому времени я немного отошёл и заявил, что во многом потому что я не знаю SQL, что было не совсем шуткой т.к. Doctrine заставила забыть меня о кучах джойнов и не заботиться о структуре таблиц. На работе приходится иметь дело с голым SQL, меня достаёт делать кучу бессмысленных телодвижений, вместо строчки на DQL.
Затем выступал представитель Netcat, рассказал кучу правильных вещей о том, что готовое решение лучше кучи самопальных CMS, зияющими багами и плохой архитектурой. За время консультаций на phpclub и других скопищах php джуниоров я возгорелся ненавистью к велосипедам. Хотя предыдущее место работы как раз покинул, когда компания решила пойти по пути Netcat+Bitrix, о чём не жалею.
Очаровательная Маргарита Деминская из UmiCMS продемонстрировала прелести работы с их CMS с точки зрения секретарши. В техническом плане девушка не сильна, но это как раз был её плюс. Самое забавное, что многие фишки с возвратом удалённых записей и откатом изменений элементарнейшим образом делается в Doctrine с помощью SoftDelete и Versionable, вот о чём мне нужно было подробно рассказывать, а не грузить фаулеровской теорией.
Ну и как фишка дня был круглый стол по CMS, Дмитрий Васильев прекрасно отбивался от поклонников друпала, а Маргарита заявила:  «Следуйте API и всё будет хорошо», благо в UMI как раз API какое-никакое присутствует. И ещё узнал, что есть куча готовых шаблонов с темпэйт монстра под UMI, а это весьма серьёзный факт с учётом XSL шаблонов их CMS. Интересным был вопрос о расширении готовых модулей, что элегантно сделано в Друпал и невозможно без переписывания в данных коммерческих CMS. Дома сделал профайлинг и решил, что как в друпале лучше не надо.
Следующий день был никакой, я совсем размяк, послушал только доклад представителя адоб, меня очень интересует трансляция аудио-видео, но больше решения от майкрософт с их IIS 7. Затем плотно покушав послушал товарища от майкрософт, хотя некоторые вещи удалось узнать ещё на конуне. И так как СЕО и деньги от поситителей меня не сильно беспокоят (смотрим ссылки сапы внизу блога ;)), всё остальное решил пропустить, кроме выступления о бизнес-инкубаторе БГУИР. Было смешно и не серьёзно, четырёхзначные суммы — это на корманные расходы или на пиво? Со стартапов убежал, меня бесит это слово.
Очень хотел попатьсть на третий день, но решил остаться дома, чтобы простуда меня не свела в могилу. И правильно сделал и так запустил и не стоило оно того.
Организатором огромное спасибо, кроме отсутствия интернета нареканий нет, сделали всё что было в их силах. Но вот доклады, в так ожидаемый технический день, меня поразили своей заточенностью на полных нубов, которые первый раз услышали о технологии. Кулуарные разговоры моглы бы спасти положение, но их особо не было, очень жалею что не удалось переброситься словечками с докладчиком об AJAX.
Конференция “Байнет 2.3 Gamma: в новом формате веба”
14-15-16 мая 2009.
Конференция “Байнет 2.3 Gamma: в новом формате веба” – одно из крупнейших событий  Беларуси в области современных информационных технологий. В 2009 году пройдет в третий раз.
14 мая будет посвящено техническим вопросам современного интернета: программирование, верстка, веб-стандарты, проектирование интерфейсов, хостинг и т.п.
15 мая будет посвящено гуманитарным вопросам: блоггинг, интернет маркетинг и пиар, аналитика рынков, дизайн, презентация новых проектов, инвестиции и т.п.
16 мая станет специализированным днем по видео в интернете: интернет-трансляции, потоковое видео и сервисы для него, интернет-телевидение, съемка, монтаж и кодирование видео и т.п.
Участие в конференции БЕСПЛАТНОЕ.
Программа события здесь
Я буду учавствовать в конференции с докладом «Удобная работа с базами данных в PHP», который посвящён ORM, теория, реализация и более-менее подробно задержусь на Doctrine.
Google: империя зла?
Гугл предоставляет огромное колличество полезных сервисов, там мы храним почту, храним документы, храним фотографии. Даже статискика по сайту получаем из feedburner и google analytics. Ну а последнее время компания и вовсе вышла за границы веба, выпустила Android и браузер Chrome.  Вы чувствуете себя зависимым? Вам страшно, чтовся информация о вас доступна товарищам из google. Вы верите в теорию всеобщего заговора? Тогда Вам сюда http://masterplanthemovie.com/.  Но даже если Вы, как и я считаете, что Вам нечего скрывать и не боитесь google, всё же посмотрите эту интересную флешку http://masterplanthemovie.com/.
Здорово получилось, недавно писал о microsoft, сейчас google, следующим будет apple 😉
Компания microsoft открыла код MVC фреймворка для ASP.NET
К этому они шли очень долго, но никто не ждал такого финиша. Первые креативные мысли по созданию своей реализации MVC появились у разработчиков ещё в 2007 году, затем вышло несколько версий — превью, беты, релиз кандидаты. Но лишь в марте 2009 года состоялся настоящий релиз.
Если релиза ждали многие, то вот о том что это будет ещё не самая важная новость, догадывалось нороду мало. Недавно было объявлено, что фреймворк является открытым и распостраняется под открытой лицензией MS-PL.
Меня не прильщает ASP.NET, но посмотреть в исходники от корпорации тьмы я всё же решил, чего и другим советую. Качать здесь.
Ну и немного оффтопа. Microsoft превратилась в красную тряпку для многих айтишников, а быки как известно — дальтоники, им плевать на что бросаться. Не уподобляйтесь им, не всё творимое «чёрной» компанией является плохим. И от просмотра кода или знакомства с их продуктами Вы не превратитесь мгновенно в зомби.
Паттерн: Registry
Постараюсь расказать о моей реализации паттерна Registry под php.  Registry — это ООП замена глобальным переменным, предназначеная для хранения данных и передачи их между модулями системы. Соответственно, его наделяют стандартными свойствами — запись, чтение, удаление. Вот типовая реализация.
Ну и таким образом получаем тупую замену методов $key = $value — Registry::set($key, $value) $key — Registry::get($key) unset($key) — remove Registry::remove($key) Только становится непонятно — а зачем этот лишний код.  Итак, научим наш класс делать то, что не умеют глобальные переменные.  Добавим в него перчика.
К типичным задачам паттерна, я добавил возможность блокировки переменной от изменений,, это очень удобно на больших проектах, случайно не всунешь ничего. Например, удобно для работы с бд
define(‘DB_DNS’, ‘mysql:host=localhost;dbname=<SOME_DB>’);
define(‘DB_USER’,  ‘<SOME_USER>’);
define(‘DB_PASSWORD’,  ‘<SOME_PASSWORD>’);
define(‘DB_HANDLE’);
Amdy_Regisrtry::set(DB_HANDLE, new PDO(DB_DNS, DB_USER, DB_PASSWORD) );
Amdy_Registry::lock(DB_HANDLE);
Сейчас пояснения по коду, чтобы хранить данные, мы используем статическую переменную $data, в переменной $lock хранятся данные о заблокированых для изменения ключах. В сетере мы проверяем залочена ли переменная и изменяем или добавляем её в регистр. При удалении, также проверяем лок, гетер остаётся неизменным, за исключением опционального параметра по умолчанию. Ну и стоит обратить внимание на обработку исключений, которой почему-то редко пользуются, кстати, у меня уже есть черновик по исключениям, ждите статью. Чуть ниже черновой код для тестирования, вот и статью о тестировании, тоже бы не мешало настрочить, хотя я и не почетатель TDD.
В следующей статье ещё расширим функционал, дабавив инициализацию данных и реализуем «ленивость».
Опера: Speed Dial
Как известно в Opera давно появилась возможность быстрой загрузки, при открытии новой вкладки по умолчанию можно выбрать один из девяти сайтов для быстрого запуска. Кроме этого доступно сочетание ctrl+0..9.
Но недавно открыл ещё один замечательный способ, если в адресной строке набрать цифру, то мы тоже попадаем на нужный сайт!!!
Никогда не устану удивляться творению норвежских программистов.
Работа с сессиями.
Часто между запросами нужно хранить какие-то данные о пользователе, но http протокол не предусматривает состояний, зато есть другие возможности. Самое главное как-то узнать пользователя, это можно сделать модифицируя строку запроса, допустим, добавив гет переменную site.my/index.php?page=index&user=123456. Вариант не очень красивый и главное опасный, т.к. идентификатор может уйти с сылкой другу. Второй вариант — воспользоваться куками, это данные, которые наш браузер посылает на сервер при каждом запросе. Дальше можно либо воспользоваться своим обработчиком, либо использовать готовый обработкик — сессии.
Для работы с сессиями достаточно вызвать session_start() до вывода чего-либо в браузер, после этого становится доступен суперглобальный массив $_SESSION, в котором и хранится информация. Важно. Идентификатор сессии может передаваться через get, post и cookie. Get и post данные являются легко изменяемыми, например пользователю подсунули ссылку с идентификатором или заставили залогиниться через поддельную форму с другого сайта, после чего злоумышленнику доступен идентификатор сессии.  Для получения идентификатора из куки в ини файле. session.use_trans_sid = 0 – в целях безопасность отключаем. session.use_cookies = 1 – разрешаем использовать куки. session.use_only_cookies = 1 – используем только куки, опция отключена по умолчанию.
Теперь немного о процессе, который происходит внутри. Сервер получает идентификатор, если он есть, имя которого можно получить-изменить с помощью session_name(), по умолчанию (session.name = PHPSESSID). Механизм сессий весьма гибок и позволяет менять обработчик сессии, для этого существует session_set_save_handler().
Вначале вызывается обработчик для работы сессии на файлах  (session.save_handler = files). Если пришёл идентификатор, то восстанавливается старая сессия, если его нет, стартует новая, для этого посылается заголовок для установки куки. Данные по умолчанию хранятся в файле, который находится в директории session_save_path() и имеет имя sess_ИДЕНТИФИКАТОР, желаельно изменять значение в php.ini session.save_path или с помощью set-get функции session_save_path. Так как он хранится в плоском файле, для записи-чтения его нужно сериализировать-десериализовать, опять же для гибкости можно менять обработчик (session.serialize_handler = php), этот процесс проходит в начале работы с сессией и по завершению работы скрипта, даже если он завершился по таймауту.
При вызове session_start() вызывается open, затем read, который открывает файл сессии, десериализует данные и возвращает их в  суперглобальную переменную $_SESSION, при этом данные покоторые записывали туда до старта естественно перезаписываются.
При окончании работы скрипта или при вызове session_write_close(), данные сериализируются и записываются, очень полезно для тяжёлых скриптов самостоятельно закрывать сессию, тем самым освобождая файл для следующих запросов.
Метод close вызывается в конце работы. Метод destroy, нужен для уничтожения сессии, впринципе он только чистит куку не удаляя сам файл, поэтому желательно вызывать $_SESSION = array(); session_destroy(); Стоит отметить gc, который нужен для уборки мусора он вызывается с частотой session.gc_probability/session.gc_divisor.
Но самая большая вкусность — это изменение обработчика сессиий, например на хранение в ДБ или memcache.
Константы
Наблюдаю за разработкой тикет системы на CI и заметил странность данного фреймворка, в нём ОЧЕНЬ много мест, где нужно параметром передавать текстовую строку. Мой совет относится не только к CI но и к остальным проектам.
Используйте константы
Что это нам даёт:
1.  Зачиту от опечаток, если у вас включены ошибки типа E_NOTICE. $this->config(DB_USER); $_CONFIG[DB_USER]
2. Удобный автокомплит.
3. Используя эмуляцию нэймспэйсов, не нужно запоминать кучу лишней информации. DB_*, PAGE_*.
4. Не забываем что и у классов есть константы MyClass::FETCH_ASSOCи теперь ваш класс будет прозрачен для пользователей.
Перезд фида
Корпорация зла потребовала перевести свои фиды, поэтому новый адрес фида. Google уже давное преобреда feedburner.com, но не предпренимала никаких особых изменений, но сейчас решила действовать координально и в ультимативной форме. Надеюсь сейчас статистика станет более точной и вылечятся детские болезни feedburder. Естественно об удобстве пользователей производитель вечных бета версий не задумался :-(. Становится страшно за нашу зависимость от подобной компании с её методами.
Дермократия
Почему я ненавижу демократию и считаю её идиотской формой власти. Я родился в великой коммунистической стране СССР, но уже школьные годы прошли в демократическом гуано свежеиспечённой страны Республика Белорусь. В той же школе, а затем в университете мне вбивали мысль, что демократия === гуд. Но у меня по этому поводу свои мысли.
Начнём с картинки «пирамиды лебедева»

И Википедии
Демократия (греч. δημοκρατία — «равный народу») — политический режим государства или политическая система, при которой власть осуществляется через прямое народовластие (прямая демократия) либо через представителей, избираемых народом или какой-то частью народа (представительная демократия). Главным признаком демократии является обеспечение пропорционального представительства во власти как можно более широких интересов населения, присутствующих в стране, а также динамическое изменение представительной власти вместе с соответствующими изменениями этих интересов во времени.
Теперь представим какая будет власть избранная и представляющая интересы большинства из нижней части пирамиды.
Теперь влючаем телевизор, открываем гугл, сзнакомимся с деяниями политиков своей страны и сравнивываем получанный образ из нашей математики и образ вызваный занкомством с деяниями избранников народа.
У меня получилось весьма похоже.
На постсовецком пространстве демократия так и не утвердилась, т.к. народ привык к тоталитаризму. В итоге отдав власть избранному руководству, махнул рукой на демократию и начал со слорадством наблюдать, как у властей всё валится из рук. Затем приходит пора выборов и вместо того чтобы с помощью своего демократического права изменить ситуацию, народ снова, с садомазахистской упорностью, выбирает всё туже запачканую власть.
Ну что же, что заслужили, в том и плаваем :(.
Кодировки
Как это не странно, но до сих пор очень часто многие начинающие задают вопрос о кодироках, вернее о «неправильном» отображении русских буковок. Постараю описать все по порядку, следуя данному списку инструкций у меня никогда не возникало проблем с кодировками.
Перый шаг — настройка вашего любимого редактора. Ищем пункт encoding (кодировки) и ставим utf-8. Очень советую использоать именно юникод, чтобы избежать проблем в дальнейшем. Конечно, у юникода есть ряд недостатков, но пользы гораздо больше. Ах, да, ещё пару советов по настройке редактора. Выставьте конец строки в стиле unix  — \n, и используйте 4 пробела вместо табов.
Второй шаг — HTML. Добавляем строку
Третий шаг — РНР. Некоторые браузеры пренебрегают  Content-Type и используют кодироку, посылаемую сервером, обычно по умолчанию iso-8859-1(latin1). Значит мы посылаем нужную нам —
Четвёртый шаг — базы данных. Обычно данные берутся из базы данных, поэтому при создание таблиц и полей не забываем указывать нужную кодировку — utf8_general_ci. Обратите внимание, что именно general_ci, а не bin, как любят многие, это позволяет работать с данными как со строками, а не с двоичными данными. Но хостере и здесь заготовили подвох, и по умолчанию чаще стоит другая кодировка. Поэтому предупредим MySQL, что собираемся работать именно с utf-8, для этого сразу после подключения посылаем запрос:
Обратите внимание, что в названии кодировки нету дефиса. Некоторые советуют посылать ещё парочку, но у меня такой надобности не возникало.
Пятый шаг — если таки данные берутся из другой кодироки, для этого используется функция iconv(), которая конвертирует данные из одной кодировки в другую. На некоторых хостингах нету сего полезного расширения, но я предлогаю игнорировать хостинги с ненастроенным РНР и неустановленными популярными расширениями.
Дерзайте, все неудачные попытки конспектируйте и задавайте вопросы.
p.s. Ещё статья по теме о зловредном BOM.
Персональны аттестат webmoney.
Задача:
Обналичивать электронные деньги webmoney в Белоруси.
Исследования:
Данным делом у нас в стране занимается «Технобанк», снимать можно только белорусскую валюту, её аналог в webmoney — WMB.
Но для снятия WMB нужен персональный аттестат webmoney, его получения проходит в два этапа. Сначала получаем формальный аттестат, для этого нужно войти в систему изаполнить форму, будьте внимательны, данные в последствии нам понадобятся и не должны отличаться от оригинальных. Для подтверждения телефона отправляется SMS на ваш мобильник.
Теперь можно готовиться к получению персонального аатестата, идём на сайт «Технобанка» http://wmtransfer.by/attestat.asp , там находятся правила и ссылки на заявку для получения аттестата https://passport.webmoney.ru/asp/aProcess.asp. Там, разабравшись с формами и выбрав в качестве регистратора «Технобанк», переходим к бумажной работе. Нам нужна ксерокопия последних страниц паспорта 31-33 и страницы с текущей припиской. Так же можно скачать и заполнить бланк http://passport.webmoney.ru/pdf/Application.pdf, я так и сделал, только не вписывал дату и не ставил подпись, её нужно бы ставить уже в банке. При этом следим чтобы данные в системе webmoney, в паспорте и в бланке совпадали. Я ошибочно вписал в год рождения теперешний 2008-й, что не ускользнуло от глаз девушки-регистратора. [offtop]Какие же симпатичные девушки работают в банках, почему они не решили стать программистами :([/offtop].
Перед встречей с регистратором желательно оплатить «персонализацию» это можно сделать в кассах 5, 7, 8, стоит это 12 000 зайчиков. Сам банк расположен в Минске на улице Кропоткина 44, смутило только что вход расположен не с фасада здания, а нужно зайти под арку и повернуть налево от выхода. Оплатив поднимаемся на второй этаж к симпатичной девушке, которая вызывает регистратора, ей же отдаём чек. Так как мы ценим чужое время, бланк мы заполнили заблоговременно, я даже взял  дополнительно чистый бланк, а регистратору остаётся сверить данные оригинала паспорта и бланка, отдаём ей ксерокопиии и бланк. Прощаемся и уходим. В течении часа всё уже сделано, если данные совпали.
Я опасался теганины и непоняток с webmoney, но в «Технобанке» схема уже отлажена, все всё знают и пошлют куда нужно. Вобщем остались только тёплые воспоминания, кроме возвращения пешком, по ремонтируемым улицам проспекта, потому что остановка в мою строну чёрт знает где. Но ходьба — это спорт, а спорт — это здоровье.
PHP: доунгрейд до 5.2.6
Из-за ошибки с magic_quotes_gpc провалился выход версии 5.2.7. Но, вместо ожидаемого выхода версии 5.2.8, который уже неофициально валяется открытом доступе, разработчики предложили откатиться до старой версии :(.
Как мне кажется такой ляп вызван тем, что основные силы брошены на ветки 5.3 и 6.
Обновляемся до версии PHP 5.2.7
В то время как вся общественность ждёт выхода стабильных PHP 6 и релиза PHP 5.3 в которых обещана масса приятных вещей типо Namespace, лямбда функций, посзденого статического связываний и т.д. А вот PHP 5.2.7 появился как-то незаметно, да это и понятно, в основном все изменения закрывали тикеты с багами плюс обновления библиотек. Обновиться естественно нужно сейчас же и можно продолжать ждать.
P.S. Лучше не обновляться, как выяснилось есть серьёзный баг с magic_quotes_gpc on, который игнорируется, соответственно будут проблемы со скриптами, где программисты рассчитывали на эту функцию источник
Все изменения как всегда здесь
Doctrine 1.1 Alpha
Продолжает набирать обороты ORM фреймворк на PHP — Doctrine. Недавно он стал основным в популярном фреймворке Symfony, а сейчас появилась самая долгожданая фича — нормальная миграция. Как таковой инструмент был и ранее, но сейчас он превратился в понастоящему юзабельный. Теперь при миграции автоматически делаются диффы для схем и на их основе генерятся классы для миграции. Меньше работы ручками, больше времени для пива с друзьми.
Более подробно читайте в блоге разработчиков
SPL в  PHP: ArrayObject
Довольно неожиданно пришла идея довести начатый шаблонизатор до юзабельного вида, дописал хелперы, встроил кеширование, решил прицепить хелпер для формы. И здесь мне стало нехватать ООП стиля. Накидав кой-чего понял что вначале нужно написать цикл статей о SPL (Стандартной PHP библиотеке). Эта штука очень полезна при ООП стиле кодирования, а особо нормальных статей об SPL на русском я не обнаружил.
Начнёмс.
ArrayObject — предназначен для того, чтобы объект вёл себя как массив, даёт доступ к данным через квадратные скобки и позволяет делать foreach 
Данный класс имплементирует интерфейсы IteratorAggregate , Traversable , ArrayAccess , Countable
IteratorAggregate , Traversable — отвечают за гуляние по объекту, соответственно нужно реализовать метод getIterator. Эти вещи будем разбирать в другой раз.
 Countable — нужно реализовать интерфейс для получения размера count.
ArrayAccess — это  квадратные скобочки — проверка существования offsetExists, получение значения — offsetGet, присвоение значения — offsetSet, уничтожение элемента — offsetUnset и добавление элемента — append.
Со скучной теорией покончено, сейчас практика
Так мы побыстрому создали свой обработчик, унаследовав класс из SPL. Что же там происходит.
В конструктор передаётся сам массив, его можно передать и позже, но не важно. Данный массив мы загоняем во внутреннюю переменную $this->array, дальше, мы описываем,  как должны обрабатываться запросы к объекту как к массиву. Т.е. все запросы будут реально относиться в переменно $this->array. Можно и вовсе не заводить эту переменную, а работать с атрибутами класса, если в коде заменить $this->array, на get_class_vars($this), $this->{$k} и т.д.
Простой пример использования.
PHP не стоит на месте, потому, кое-что уже изменилось, постоянно добавляются новые классы, методы и интерфейсы, чтобы не изобретать свои велосипеды.
Футурама тест
нашёл ссылающийся на меня блог http://dk.testea.ru/, обрадовался, что всё же кто-то меня читает и находит это полезным. Полазав по http://testea.ru/, оказавшийся очень приятным ресурсом, нашёл интересный тест. Я не люблю такие, вещи, но это же ФУТУРАМА
Если Вы желаете узнать больше о своем характере и о характере  героев «Футурамы», то прочитайте статью «Псих-о-рама».
Пройти тест.
Зря проходил, сейчас думаю, неужели я так похож на блондинку, сходство с Бендером, хоть немного утешает мою боль.
Шаблоны и View
Я предлогая разделить эти две обсолютно разные вещи. Попытаюсь объяснить как я понимаю эти понятия.
View — соответствует представлению в известном трёхбуквенной абривеатуре MVC. Не будем забывать, что эта святая троица была придумана не для веба, чем же она должна была заниматься. View должен передавать данные в удобном для потребителя виде. В декстопных приложениях — это отрисовка окна приложения, контролов в нём, менюшки, анимация, таблицы с данными, реагирование на действия пользователя и т.д. В ОС некоторыми вещими берёт на себя сама ось и вьюха должна руководить этим поведением через api. Поэтому я не перевёл дословно — «Вид», фактически View занимается гораздо большим количеством вещей. Затем, мы сменили декстопный вид на web интерфейс, который пользователь получает в браузере. Теперь View занимается формированием html, js и т.д. И сново же View, посредством javascript обрабатывает действия пользователя, которые затем браузер передаёт конторллеру. Получается данные влияют на представление, которое в свою очередь передаёт нужное действие контроллеру, а тот работает с данными и так по кругу. Поэтому MVC, а не CMV. Если выбросить контроллер, то получатся данные и их представление == xml и xsl. А теперь и вовсе избавимся от зрительных образов, чем занимается View при XML RPC (удалённый вызов процедур)? Он приводит данные к нужному формату — xml.
Шаблоны. Мне больше нравится обозначение трафарет — этакая заготовка со специальными местами, которые нужно обрисовать, заполнить данными. Соответственно это уже законченый образец отображения данных, который нельзя менять. Хочешь вырезать квадратик с кружочком внутри — будь добр, заведи новый шаблон и не порть квадрат, который ещё пригодится.
И очень важное убение View работать с шаблонами, например при отображении данных в виде xml известной структуры, можно воспользоваться заготовкой xml и заполнить нужные места данными. Но если структура динамическая придётся xml формировать другими средствами, например с DOM или SimpleXML в php 5. Но этим будет заниматься как раз View, это его задача.
Вывод 1
View значительнее функциональнее шаблонов и дожен покрывать максимально возможные потребности по представлению.
Вывод 2
Шаблон вовсе не должен обладать функциональностью.
Теперь перейдём к шаблонизаторам и View.
Нам нужно сформировать контрол select. Соответственно у View должен быть метод, который берёт данные о контроле и выводит готовый контрол. Для вывода ему понадобится два шаблона select и option, это прекрасно видно в javascript при генерации списка создаётся элемент select и в него добавляются option-ы. Статические селект генерим без проблем простой заменой псевдометок, а вот отобразить динамические данные без участи MC шаблон и вовсе не может . Вначале рендерится открывающийся тег, затем рендерится энное количество шаблонов с option, а затем закрывающийся тег. Получается, что шаблонизатор — это кастрированый View, который к тому же разбивает сущность на части при рендеринге.
Идеальный шаблонизатор. Функция str_replace, она покрывает возможности заменять псевдокод данными, плюс цикл для обработки циклических частей.
Идеальный View. Его нету, так как View должен быть платформонезависимым, самая успешная попытка в этом плане XSLT. В php мне нравится smarty и quicky, так как дают возможность создать свой View и при этом за счёт псевдоязыка практически не даёт использовать не View возможности php, но при этом есть неудобства. Во-первых нужно учить псевдоязык, удобнее было бы, если бы синтаксис совпадал с синтаксисом самого php. Во-вторых не очень удобно расширять возможности, допусти для контрола типа дерева в smarty нужно писать функции для компилятора, либо использовать рекурсивный инклуд, что неприемлимо так как разделяет функционал.
P.S. Перечитал и понял, что зря таки Фаулера забросил на первой сотни страниц, с терминологие тяжело приходится, надеюсь, всё же более менее понятно.
Flash сообщения 2
Как и обещал, вернулся к flash сообщениям.  Переделаем его на статические методы. Итак, немножко теории.
Статические методы могут вызываться без создания экземпляра класса (объекта), при объявлении метода указывается ключевое слово static. Точно так же объявляется и статический атрибут класса.
Т.к. статические атрибуты не связаны с экземпляром, то и вызов их осуществляется не через $this->atr, а через self::$atr, обращаю внимания на двойное двоеточие и баксик. Есть ещё одна печальная особенность, сильно ограничивающая маневры – при расширении (extends) класса статический атрибут остаётся связанным и с родителем, поэтому ждём PHP 5.2.6, где появится возможность вызывать через static::$atrатрибут определённого этого класса.
Заведём константы для разных типов сообщений
const INFO = 1;
const NOTICE = 2;
const WARNING = 3;
И статические переменные
static protected $_name = ‘flash’;
static protected $_nameMessage = ‘message’;
Первая служит ключом массива для flash сообщений, а второй для подвида — message, который имеет три вышеуказаных типа: информация, предупреждение и критическая ошибка.
Ну и описываем три основных метода
Первый — get, он принимает индекс и второй переменной может идти значение $keep, которая позволяет не удалять переменную после запроса. Ну а внутри проверяем есть ли что, берем и чистим если нужно.
Вот весь класс
Теперь его можно смело добавить в хелперы к форме, в другой статье напишу как.
Используем так
Как найти BOM
Если Вы используете utf, то встречались с таким символом, как BOM (Метка порядка байтов).  Довольно бессмысленный символ при использовании utf-8, к которому неприемлим этот самый порядок.
Всё бы ничего, но этот лишний символ в начале файла приносит много проблем, когда попадает в вывод скрипта и происходит бом на сайте: не работает js, проблемы с куками и сессиями, просто непонятный символ на экране…. А уж редакторов, любителей вставить сей злосный символ куда не надо, предостаточно. Всегда проклинал блокнотоподобные редакторы, но изредко для быстрой правки использую notepad++. Уже сотню раз собирался выбросить его из-за дурацкого автокомплита, который даже тег <?php не позволяет нормально писать. Но злосный BOM стал его окончательным преговором, надо же при редактировании плагина сей злосный символ попал в плагин контактной формы, а в итоге у меня отвалился javascript в редакторе, я долго не мог понять, пока не включил консоль ошибок в любимом Operaи не вычислил злоумышлинника. Даль любимый Total Commnder и поиск файлов с текстом \xEF\xBB\xBF , для этого нужно отметить RegEx (2).
Asta la vista baby
Новая версия Zend Framework — 1.7
Официальный список обновлений:
Радует появление ZendX_JQuery, неужели будет поддержка jQuery. Ну и обязательно попробую Zend_ProgressBar — прогрес бар для загрузки файлов, наверняка реализовано через apc, посмотрим что разработчикам насоветовали сами создатели php. Добавили поддержку пэйджинга в Zend_Table, ура товарищи, жаль что до этого так долго доходили.
Фреймворк двигается, только неизвестно куда. Даже на сайте в шапке до сих пор висит 1.6, как всегда, на детали плевать 🙁
Свой шаблонизатор 2
В первой части мы по всем правилам ООП создали шаблонизатор, теперь наростим его мощь, будем делать это двумя способами:
Первый способ эллементарный:
а в шаблоне
можно и без второго параметра, но иногда очень важно чистить кавычки.
Второй способ позаковырестее.
Будем применять делегирование — когда свойства одного объекта передаются (делегируются) другому. Способ примерно таков:
Т.е. мы получаем нужный объект и вызываем его метод.
Интерфейс было решено не трогать, чтобы оставить возможность минимализма для извращенцев, менял абстрактный класс.
Добавились две переменные $_helper и $_helperMethod в первой будут храниться наши помощники, а во второй набор методов из помощников. Так же два метода — addHelper и магический __call. С помощью первого мы добавляем helper, при этом проверяя, чтобы не появилось одинаковых методов. во втором с помощью магии мы вызываем метод из helper-ов, обходя их с помощью foreach и проверяя с помощью method_exist существование и когда находим нужный helper вызываем его метод передавая параметры с помощью call_user_function_array. В php есть call_user_method_array, который, судя по названию кажется более пригодный, но он считается устаревшим и использовать его не рекомендуется, вместо этого мы передаём в качестве параметра массив с объектом и методом.
Теперь проверим навый функционал. Изменим шаблон
И теперь делегируем новые методы say и say2
Создали два класса test и test2,  а у них методы say и say2. И с помощью addHelper перадаём их в шаблонизатор.
Ну и архивчег с кодом навсякий. скачать исходники
Свой шаблонизатор
Вы хотите отделить логику представления от остальных слоёв приложения? Вам нужен шаблонизатор, желательно простенкий. Ну чтоже, напишем свой.
Обределимся с минимумом:
Тем самым мы получили наш интерфейс. В кодинге будем придерживаться стандартов хорошо зарекомендовавших себя ещё во времена PEAR.
файл Amdy/Templater/Interface.php
Применяем магические меоды __set и __get для присвоения значения переменной и для её последующей экзекуции. display для вывода содержимого шаблона с нужными вставками.
Сейчас начнём реализаци. Создаём абстрактный класс и пишем код
файл Amdy/Templater/Abstract.php
Защищённая переменная $_data нужна нам для слаживания наших переменных шаблона. Соответственно чтобы присвоить, достаточно сделать вызов
$tpl->имя_переменной = значение
для вывода
echo $tpl->имя_переменной
Ну а display вызовет наш шаблон, который будет выполнен в своеобразном неймспайсе шаблонизатора, соответственно будут недоступны глобальные переменные, зато будет доступ к $this.
Что ж теперь займёмся созданием непосредственно класса Templater
файл Amdy/Templater.php
Упс. Нам ничего не нужно реализовывать, так как всё уже сделано в абстрактном классе. А вот в следующий раз, когда у меня дойдут руки, позанимаемся переопределением методов и нарастим шаблонизатор. К тому времени я постараюсь таки установить плагин для слинковывания статей.
Нарисуем шаблон для вывода
файл test.tpl.php
Между двумя восклицательными знаками должно появиться значение переменной шаблона test. Как видите, я использовал короткие теги, что как бы не рекомендуется, но я ещё не встречал хостинга, где бы были запрещены короткие теги, а программист человек ленивый и культурный, потому старается не писать лишний раз где попало три заветные буковки. Так же короткая нотация echo, тоже из лени, да и наглядности добавляет.
Ну и перемешаем все ингредиенты дабы получить приготовляемое блюдо.
файл index.php
На всякий случай привожу структуру каталога.

Кросбраузерная вёрстка
Я не верстальщик и никогда им не был, но периодически приходитсядобавлять разметку в существующую вёрстку. Есть катигория вёрсток, в которой добавления нового превращается в ад. А избежать этого в большинстве случаев очень легко.
Каждый браузер обладает своими багами-фичами и норовит отобразить элемент по своему. Бороться с этим не так трудно, если всё нужное было сделано на первоначальном этапе. Как заставить отображать одинково и не использовать видеье браузера? Нужно запретить отображать по своему и сказать как.
Итак запрещаем. ДЛя этого используем «ластик», который сбрасывает спорные моменты. В css прописываем:
Так мы избавляемся от основной проблемы — разных отступов.
А так, фиксим отображение картинок.
Теперь можно продолжать магию, но важно помнить, что довёрстывать возможно будет человек не знакомый с вашими планами. Прописывая стили нужно стараться как можно уже описать круг их применения.
Например, p {padding-left:10px;}, вроде удобно, но если затем придётся вставлять абзац без отступа, то сложно догадаться, а почему это отступ слева появился. Куда нагляднее p.paddingLeft10 {padding-left:10px;}
А ещё здорово помогают заготовки типо
Вот с таким минимумом куда приятнее иметь дело и скорость возрастает вразы.
Flash сообщения
Часто бродя по сайтам и заполняя формы встречаю некоторые типичные недоработки при обработке форм.
Например, после обработки забывают сделать редирект, в итоге при нажатии «Обновить», данные посылаются повторно, что очень неприятно.
Поэтому, не забываем
Теперь появляется новая проблема — как сообщить о результатах обработки. Для этого воспользуемся так называемыми flash сообщениями.
Я приведу один из вариантов.
В начале сценария мы создаём объект $flash, при этом данные из $_SESSION[‘flash’] копируем в закрытую переменную класса и очищаем $_SESSION[‘flash’].
С помощью магических методо мы работаем с флэш данными:
1. __set() используем для занесения переменной в сессию.
2. __get() для извлечения флэш данных.
3. __isset() для проверки на сущестование данных.
В следующем очерке сделаю всё на статических методах и изменю алгоритм.
Чёрный пиар. Сокрытие доходов и неуплата налогов гражданами белоруси.
Недавно на Хабре прочёл пост о девушке, которая решила бороться с незаконными доходами фрилансеров и предлагает сдавать сих бандитов. Естественно на блог ломанулись кучи народа в основном чтобы обидеть ангелочка.
И практически сразу начали появляться ссылки, в том числе на фрилансерские сайты и на скачку фильмов. Плюс была интересная статья о единстенном «чесном» фрилансере, зайдя по ссылке полез посмотреть форму обратной связи, оказалось «обязательные» поля не такие уж и обязательные, о чём я оставил комментарий. Видимо я был не один и статью побыстренькому убрали. На этом этапе я убедился, что проект носит вовсе не моральный характер, а желание пропиариться. Не знаю, девушка это или группа людей, но акция явно удалась. Игра на нелюбви к государству и нежелании делиться сработала.
В вопросе налогообложения блогерша явно не разбирается и привела компрометирующий пример с братом (Оплата налогов с суммы, полученной “оттуда”), который якобы делает переводы и при оплате через Wester Union у него снялись налоги и всё, он святой фрилансер. У меня был неприятный опыт с налоговой по данному вопросу. Пришлось покататься и пообщаться с работниками данного органа. Плюс была парочка замечательных комментариев на эту тему. Официально её брат не только не платит налоги, но и к тому же, незаконно занимается предпринимательской деятельностью.
На этом пиарщица решила не останавливаться, ведь постепенно блог стал остывать, и она бросила новую кость. Как известно, белорусский президент, не смотря, на 87% голосов на выборах является непопулярным героем, вот Вам и новая статья – «Президента не смейте трогать!».
Интересно, чего ждать дальше?
И почему мы попадаемся на такие вещи, хотя и знаем, что это полный бред.
Все, а мне пора заняться незаконным зарабатываением денег.
Facebook выложила некоторые исходники.
Источник
Очередной дар open source  со стороны популярного проекта. Теперь все могут заглянуть во внутрь Scribe, предназначеной для агрегации данных, расположеных на разных серверах. Вконтакт празднует 😉
Маленькая месть спамерам.
Вы устали от спамеров, они портят Вам жизнь, они пытаются втюхать ненужные Вам товары. Тогда делайте как я, ответьте им их же методом.
—————————————<-
*********(18:12:32 21/10/2008)
Добрый день!
Если Вы разрабатываете дизайн макетов для последующей печати, значит, я по адресу. А если Вы с этим никак не связаны, извините, что потревожила.
Наша компания занимается производством полиграфической продукции.
Предлагаем специальные условия на цифровую печать:
— высокое качество печати от НР 9500 hdn, предоставляем образцы
печати бесплатно (на бумаге XEROX Colotech + 100г/м.кв.,
140г/м.кв.
—————————————<-
*********(18:12:32 21/10/2008)
gloss, 280г/м.кв., 280г./м.кв. лен, 280г/м.кв. облако)
— оперативность: «Сегодня на сегодня» и «Сегодня на завтра»
— возможность предоставления CMYK пантона отпечатанного на нашей
машине! 100% попадание в цвет. Пантон можно приобрести
(100у.е.) или получить бесплатно при размещении заказов на сумму от
500у.е.
— возможность дополнительного заработка:
15% скидка при
—————————————<-
********* (18:12:32 21/10/2008)
заказе дизайнером;
10% скидка при рекоммендации нашей типографии заказчику.
Наличные не выплачиваются, дизайнер может на накопленную
сумму заказать цифровую печать.
С уважением, *********.
Тел: (017) *********
(029) *********
ICQ:*********
—————————————>-
AmdY (18:19:38 21/10/2008)
Уважаемая Кристина. Вы немного не по адресу, но возможно я могу Вам что-либо предложить.
Я занимаюсь разработкой сайтов и вэб ориентированых бизнес приложений. Заметил, что в вашей контактной информации нет адреса  в интернете. Возможно, если Вы решитесь заказать сайт у меня, Вам не понадобится рассылать спам по аське, так как Вас можно будет легко найти. Причём я предлогаю Вам не просто сайт-визитку, а полноценный вэб офис, через который вы можете вести переговоры и получать нужные материалы от заказчиков. Данная система называется CRM, учитывая малораспостранённость сих в нашей стране, подобный вэб офис может стать веским вкладом в процветание Вашего бизнеса.
С уважением, Вячеслав.
ICQ: 311 071 271
—————————————<-
*********(18:22:45 21/10/2008)
Спасибо. Буду иметь ввиду)
—————————————<-
*********(18:22:54 21/10/2008)
Всего хорошего и успехов)
—————————————>-
AmdY (18:23:02 21/10/2008)
Вам того же
Облако тегов.
Заметил, как после последних публикаций в облаке тего разросся один тег. И сразу же впомнилось несколько обсуждений. Меня в этом вопросе наставил на путь истенный Фанат с форума PHP Club. Что нужно от тегов — быстрый поиск материалов по интересующему слоу-тегу. С этимнеплохо спраляются все подобные облока. Вот только разный размер букв популярных тегов и слишком малый размер непопулярных сильно затрудняет поиск нужного тега в облаке. После вопроса Фаната, я осознал, что при поиске нужного тега пользуюсь либо поиском в браузере, либо набираю прямо в адресной строке. Кроме этого часто теги размещают рандомом, а не в алфавитном порядке, в таком случае облако и вовсе неюзабельно, если вам нужны не фото голой курниковой или google.
Второй недостаток большинста облок — невозможность искать по нескольким тегам одновременно, но сейчас эта проблема исправляется. Хотя как реализовывать  сию фичу вопрос так же достаточно спорный.
Третий — практически нигде нет возможности посмотреть все теги, вот и приходится набирать в адресной строке наугад, а здесь возникает дополнительная проблема с поиском по похожим тегам, но это уже каприз :), как программист я понимаю насколько это геморная и неоднгозначная задача.
О плохих шаблонизаторах
Для меня стало неприятным открытием что многие до сих пор используют для шаблонизации таких уродцев как XTemplate, либо пишут свой такой же велосипед с квадратными колёсами.
И так, давайте рассмотрим принципы их работы.
Первоочередной задачей шаблонизации является разделение бизнес логики и логики представления. Говоря человеческим языком, для того чтобы изменить отображение страницы нужно изменить лишь часть, отвечающую за отображение, так называемый шаблон.
Что такое шаблон. Обычно это html код со вставкой специальных элементов разметки, которые позволяют добавлять динамические данные.
На первом этапе создаётся массив данных, которые нужно передать в шаблон, а затем выводится сам шаблон и делаются замены спец вставок, на данные полученные в первом этапе.
Для обнаружения и подмены вставок, обычно используются два способа — функция str_replace и регулярные выражения. Первый вариант довольно шустрый, но имеет рад ограничений, второй из-за использования регулярок довольно ресурсоёмок.
И так, что происходит внутри. Берётся файл с шаблоном, загружается в память, затем обрабатывается с помощью строковых функций и делаются замены. Парсинг целого шаблона штука довольно трудоёмкая, а главное бесполезная. У нас для шаблонов уже есть РНР, который позволяет писать этакий код:
<h1><?=$title?></h1>
<ul>
<? foreach $items AS $item { ?>
<li><?=$item?></li>
<? } ?>
</ul>
А теперь представьте шаблон  пару сотен кода, в котором должны делаться замены, которых можно было легко избежать, подумайте, насколько упадёт производительно?
Для чего же тогда написана такая громадная библиотека как smarty и его аналоги, если уже есть готовые средства.
И так, рассмотрим второй подвид шаблонизаторов. Смартиподобные шаблонизаторы имеет ещё одну прослойку — компиляция. То есть, как и у первых, берётся шаблон, но не делается замена вставка — значение переменной, а вставка — переменная, после это всё записывается в файловую систему, чтобы при повторном обращении не делать лишних преобразований. В итоге, мы получает php шаблон. Но скорость даже подобных шаблонизаторов хуже чем, ежели бы обошлись без них.
И на кой нам это?
Первое преимущество — безопасность. Убрав из шаблонов РНР мы делаем шаблоны безвредными.
Второе тесно связано с первым. Теперь изменением дизайна могут заниматься не программисты, нужно лишь не нарушать разметку.
Третье — автоматизация. Люди ленивы, а жизнь коротка. поятому нужно стараться не делать дважды отдно и тоже. Допустим в смарти есть элемент html_options, который позволяет создать список единого выбора, есть escape, который поваляет обезопасить вывод, избавившись от потенциально опасных тегов.
Четвёртое….. А ну его, додумайте сами.
Результаты.
Шаблонизания на основе компилируемых шаблонов, помогает сэкономить кучу системных ресурсов, по сравнению с дермошаблонизаторами, при этом расширяемость позволяет выходить за рамки логики отображения, но хорошо это или плохо, решать каждому для себя. Пользуйтесь качественным кодом.
P.S. Некоторые умеют летать, а другие сё ещё «залетают».© Кто-то умный.
Шаблонизация: Что, где, как
Вопрос о шаблонах подобен священной войне за веру, он вызывает потоки флейма на форумах, блогах, конфернциях…
Что такое шаблон? Это заготока для отображения входных данных. Его основная задача определить где, что и как будет находиться.Вроде всё просто  и понятно, но когда мы начинает отделять логику от представления возникает много вопросов о разделении полномочий. И так человек приходит, либо не приходит к понятию логика предсталения. После этого становится мало и человек начинает использоать актиные шаблоны и постепенно приходит к понятию view. 
Попытаюсь рассмотреть типичные задачи возлагаемые на шаблоны.
Где.
С помощью специальных знаков мы указываем где должна происходить встака. Т.к. php изначально был навёрнытым щаблонизатором, то примеры будут на нём, а не специализированых шаблонизаторах.
вставить после данного текста <?=$var?>, а не после этого.
Что. 
Вот и первый краеугольный камень. Если вставлять простые переменные, то подходит чисто пример выше. Но в реальных задачах приходится выводить массивы, данные из объектов. Некоторые предпочитают для массивов гонять цикл непосредственно в php, чтобы не использоать for или foreach в шаблонах. Выглядит примерно так.
Мало того что это неудобно, так ещё и нарушает концепцию разделения логики.
Куда проще делать это в шаблоне, тем более при вёрстке придётся менять только шаблон и не нужно лезть в код, чтобы узнать какой шаблон использоался для блочной переменной
Как.
Считаю глупым чтобы программист указывал верстальщику как нужно обработать переменную чтобы её ставить. Очень часто имеено при вёрстке видно нужно ли обрабатыать html теги, какой должен быть перевод строки, на сколько обрезать длинную строку. Допустим, администратор в textarea ввёл текст, который сохранился в базу данных, затем при выводе, если мы всталяем её в textarea, то делаем
<textarea><?=$var?></textarea>
, а если в p
<p><?=nl2br($var)?></p>
%RELATEDPOSTS%
Формы и Safari
Сегодня с прискорбием узнал, что мои чудо формы не работают в safari. Но причину нашёл довольно быстро, я при создании форм не прописываю action, оставляя его пустым. Но в данной бродилке при сабмите я поподаю на гланую страницу, согласно <base href=»адрес» />.
Что ж переделаю генератор форм. Но есть и радосная новость, весь javascript код на prototype работает, включая вертикальные и горизонтальные скролы на которые я убил столько времени.
Надеюсь в ближайшее время выложу получившуюся фотогалерею на prototype.
Немножко о  траблах
С появлением сайта получилось не так просто как расчитывал, домен amdy.su прикупил раньше на http://domains.webmoney.ru/, а вот хостинг заказал позже на  http://masterhost.ru/, прописал dns в админке регистратора домена. После этого небольшой релакс в ожидании когда уже всё заработает, но … . Время шло, а домен так и не привязался. Последовало письмо в саппорт, мне ответили, что нужно выждать хотябы 72 часа.
Ждал, нервничал, так как расчитывал залить текущий проект для показа заказчику на новый домен. После трёх дней решил сделать финт ушми и зарегистрировал ещё один домен, через 4 часа уже всё работало. А вот amdy.su завёлся только спустя неделю.
Дождался
После долгих раздумий, зарегистрироавл домен, прикупил хостинг, поставил WordPress.
Взбодрись мир, вскоре появится ещё один поток бесполезных мыслей.
